<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="474px" preserveAspectRatio="none" style="width:1297px;height:474px;" version="1.1" viewBox="0 0 1297 474" width="1297px" zoomAndPan="magnify"><defs><filter height="300%" id="fh0ld6zk0ktva" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><!--MD5=[c27d767109b3913d4718b358a17ad24a]
cluster internal--><polygon fill="#FFFFFF" filter="url(#fh0ld6zk0ktva)" points="783.5,23.61,849.5,23.61,856.5,45.9069,1051.5,45.9069,1051.5,106.61,783.5,106.61,783.5,23.61" style="stroke: #000000; stroke-width: 1.5;"/><line style="stroke: #000000; stroke-width: 1.5;" x1="783.5" x2="856.5" y1="45.9069" y2="45.9069"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="60" x="787.5" y="38.6051">internal</text><!--MD5=[a4ba0c4bb4fd4c1ff73be1298269ade5]
class internal.tmp--><rect fill="#FEFECE" filter="url(#fh0ld6zk0ktva)" height="32" id="internal.tmp" style="stroke: #A80036; stroke-width: 1.5;" width="217" x="800" y="58.61"/><ellipse cx="815" cy="74.61" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M817.9688,80.2506 Q817.3906,80.5475 816.75,80.6881 Q816.1094,80.8444 815.4063,80.8444 Q812.9063,80.8444 811.5781,79.2038 Q810.2656,77.5475 810.2656,74.4225 Q810.2656,71.2975 811.5781,69.6413 Q812.9063,67.985 815.4063,67.985 Q816.1094,67.985 816.75,68.1413 Q817.4063,68.2975 817.9688,68.5944 L817.9688,71.3131 Q817.3438,70.735 816.75,70.4694 Q816.1563,70.1881 815.5313,70.1881 Q814.1875,70.1881 813.5,71.2663 Q812.8125,72.3288 812.8125,74.4225 Q812.8125,76.5163 813.5,77.5944 Q814.1875,78.6569 815.5313,78.6569 Q816.1563,78.6569 816.75,78.3913 Q817.3438,78.11 817.9688,77.5319 L817.9688,80.2506 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="24" x="829" y="78.7643">tmp</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="159" x="861" y="55.61"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="157" x="862" y="67.7487">template&lt;class Derived&gt;</text><!--MD5=[56f3777c4a342cd8020ffcf5f59f8034]
class Matrix--><rect fill="#FEFECE" filter="url(#fh0ld6zk0ktva)" height="32" id="Matrix" style="stroke: #A80036; stroke-width: 1.5;" width="230" x="36.5" y="334.61"/><ellipse cx="51.5" cy="350.61" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M54.4688,356.2506 Q53.8906,356.5475 53.25,356.6881 Q52.6094,356.8444 51.9063,356.8444 Q49.4063,356.8444 48.0781,355.2038 Q46.7656,353.5475 46.7656,350.4225 Q46.7656,347.2975 48.0781,345.6413 Q49.4063,343.985 51.9063,343.985 Q52.6094,343.985 53.25,344.1413 Q53.9063,344.2975 54.4688,344.5944 L54.4688,347.3131 Q53.8438,346.735 53.25,346.4694 Q52.6563,346.1881 52.0313,346.1881 Q50.6875,346.1881 50,347.2663 Q49.3125,348.3288 49.3125,350.4225 Q49.3125,352.5163 50,353.5944 Q50.6875,354.6569 52.0313,354.6569 Q52.6563,354.6569 53.25,354.3913 Q53.8438,354.11 54.4688,353.5319 L54.4688,356.2506 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="37" x="65.5" y="354.7643">Matrix</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="159" x="110.5" y="331.61"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="157" x="111.5" y="343.7487">template&lt;typename TT&gt;</text><!--MD5=[205dc66f7e9b2016b3f57d76c14da5be]
class MatrixBase--><rect fill="#FEFECE" filter="url(#fh0ld6zk0ktva)" height="32" id="MatrixBase" style="stroke: #A80036; stroke-width: 1.5;" width="292" x="487.5" y="150.61"/><ellipse cx="502.5" cy="166.61" fill="#A9DCDF" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M502.6094,161.9538 L501.4531,167.0319 L503.7813,167.0319 L502.6094,161.9538 Z M501.125,159.7194 L504.1094,159.7194 L507.4688,172.11 L505.0156,172.11 L504.25,169.0475 L500.9688,169.0475 L500.2188,172.11 L497.7813,172.11 L501.125,159.7194 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="68" x="516.5" y="170.7643">MatrixBase</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="190" x="592.5" y="147.61"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="188" x="593.5" y="159.7487">template&lt;typename T=float&gt;</text><!--MD5=[ea775af43a0da7cb543d6bee4ab62c40]
class Vector--><rect fill="#FEFECE" filter="url(#fh0ld6zk0ktva)" height="32" id="Vector" style="stroke: #A80036; stroke-width: 1.5;" width="227" x="520" y="58.61"/><ellipse cx="535" cy="74.61" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M537.9688,80.2506 Q537.3906,80.5475 536.75,80.6881 Q536.1094,80.8444 535.4063,80.8444 Q532.9063,80.8444 531.5781,79.2038 Q530.2656,77.5475 530.2656,74.4225 Q530.2656,71.2975 531.5781,69.6413 Q532.9063,67.985 535.4063,67.985 Q536.1094,67.985 536.75,68.1413 Q537.4063,68.2975 537.9688,68.5944 L537.9688,71.3131 Q537.3438,70.735 536.75,70.4694 Q536.1563,70.1881 535.5313,70.1881 Q534.1875,70.1881 533.5,71.2663 Q532.8125,72.3288 532.8125,74.4225 Q532.8125,76.5163 533.5,77.5944 Q534.1875,78.6569 535.5313,78.6569 Q536.1563,78.6569 536.75,78.3913 Q537.3438,78.11 537.9688,77.5319 L537.9688,80.2506 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="41" x="549" y="78.7643">Vector</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="152" x="598" y="55.61"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="150" x="599" y="67.7487">template&lt;typename T&gt;</text><!--MD5=[919351fc074032d899debac0233bd837]
class colMajorMatrix--><rect fill="#FEFECE" filter="url(#fh0ld6zk0ktva)" height="32" id="colMajorMatrix" style="stroke: #A80036; stroke-width: 1.5;" width="275" x="6" y="426.61"/><ellipse cx="21" cy="442.61" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M23.9688,448.2506 Q23.3906,448.5475 22.75,448.6881 Q22.1094,448.8444 21.4063,448.8444 Q18.9063,448.8444 17.5781,447.2038 Q16.2656,445.5475 16.2656,442.4225 Q16.2656,439.2975 17.5781,437.6413 Q18.9063,435.985 21.4063,435.985 Q22.1094,435.985 22.75,436.1413 Q23.4063,436.2975 23.9688,436.5944 L23.9688,439.3131 Q23.3438,438.735 22.75,438.4694 Q22.1563,438.1881 21.5313,438.1881 Q20.1875,438.1881 19.5,439.2663 Q18.8125,440.3288 18.8125,442.4225 Q18.8125,444.5163 19.5,445.5944 Q20.1875,446.6569 21.5313,446.6569 Q22.1563,446.6569 22.75,446.3913 Q23.3438,446.11 23.9688,445.5319 L23.9688,448.2506 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="89" x="35" y="446.7643">colMajorMatrix</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="152" x="132" y="423.61"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="150" x="133" y="435.7487">template&lt;typename T&gt;</text><!--MD5=[45a3e78decde2fd5dd9d462a38bf1e42]
class diagMatrix--><rect fill="#FEFECE" filter="url(#fh0ld6zk0ktva)" height="32" id="diagMatrix" style="stroke: #A80036; stroke-width: 1.5;" width="250" x="334.5" y="426.61"/><ellipse cx="349.5" cy="442.61" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M352.4688,448.2506 Q351.8906,448.5475 351.25,448.6881 Q350.6094,448.8444 349.9063,448.8444 Q347.4063,448.8444 346.0781,447.2038 Q344.7656,445.5475 344.7656,442.4225 Q344.7656,439.2975 346.0781,437.6413 Q347.4063,435.985 349.9063,435.985 Q350.6094,435.985 351.25,436.1413 Q351.9063,436.2975 352.4688,436.5944 L352.4688,439.3131 Q351.8438,438.735 351.25,438.4694 Q350.6563,438.1881 350.0313,438.1881 Q348.6875,438.1881 348,439.2663 Q347.3125,440.3288 347.3125,442.4225 Q347.3125,444.5163 348,445.5944 Q348.6875,446.6569 350.0313,446.6569 Q350.6563,446.6569 351.25,446.3913 Q351.8438,446.11 352.4688,445.5319 L352.4688,448.2506 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="64" x="363.5" y="446.7643">diagMatrix</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="152" x="435.5" y="423.61"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="150" x="436.5" y="435.7487">template&lt;typename T&gt;</text><!--MD5=[3281a24fdf4c1ef146bdf918d66ff719]
class ldl_matrix--><rect fill="#FEFECE" filter="url(#fh0ld6zk0ktva)" height="32" id="ldl_matrix" style="stroke: #A80036; stroke-width: 1.5;" width="244" x="521.5" y="334.61"/><ellipse cx="536.5" cy="350.61" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M539.4688,356.2506 Q538.8906,356.5475 538.25,356.6881 Q537.6094,356.8444 536.9063,356.8444 Q534.4063,356.8444 533.0781,355.2038 Q531.7656,353.5475 531.7656,350.4225 Q531.7656,347.2975 533.0781,345.6413 Q534.4063,343.985 536.9063,343.985 Q537.6094,343.985 538.25,344.1413 Q538.9063,344.2975 539.4688,344.5944 L539.4688,347.3131 Q538.8438,346.735 538.25,346.4694 Q537.6563,346.1881 537.0313,346.1881 Q535.6875,346.1881 535,347.2663 Q534.3125,348.3288 534.3125,350.4225 Q534.3125,352.5163 535,353.5944 Q535.6875,354.6569 537.0313,354.6569 Q537.6563,354.6569 538.25,354.3913 Q538.8438,354.11 539.4688,353.5319 L539.4688,356.2506 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="58" x="550.5" y="354.7643">ldl_matrix</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="152" x="616.5" y="331.61"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="150" x="617.5" y="343.7487">template&lt;typename T&gt;</text><!--MD5=[3b5fb43dc39f5527a1825b49f3dda257]
class rowMajorMatrix--><rect fill="#FEFECE" filter="url(#fh0ld6zk0ktva)" height="32" id="rowMajorMatrix" style="stroke: #A80036; stroke-width: 1.5;" width="279" x="29" y="242.61"/><ellipse cx="44" cy="258.61" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M46.9688,264.2506 Q46.3906,264.5475 45.75,264.6881 Q45.1094,264.8444 44.4063,264.8444 Q41.9063,264.8444 40.5781,263.2038 Q39.2656,261.5475 39.2656,258.4225 Q39.2656,255.2975 40.5781,253.6413 Q41.9063,251.985 44.4063,251.985 Q45.1094,251.985 45.75,252.1413 Q46.4063,252.2975 46.9688,252.5944 L46.9688,255.3131 Q46.3438,254.735 45.75,254.4694 Q45.1563,254.1881 44.5313,254.1881 Q43.1875,254.1881 42.5,255.2663 Q41.8125,256.3288 41.8125,258.4225 Q41.8125,260.5163 42.5,261.5944 Q43.1875,262.6569 44.5313,262.6569 Q45.1563,262.6569 45.75,262.3913 Q46.3438,262.11 46.9688,261.5319 L46.9688,264.2506 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="93" x="58" y="262.7643">rowMajorMatrix</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="152" x="159" y="239.61"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="150" x="160" y="251.7487">template&lt;typename T&gt;</text><!--MD5=[5a4b7f41b1b9cefbc6760c6c79898884]
class symMatrix--><rect fill="#FEFECE" filter="url(#fh0ld6zk0ktva)" height="32" id="symMatrix" style="stroke: #A80036; stroke-width: 1.5;" width="247" x="510" y="242.61"/><ellipse cx="525" cy="258.61" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M527.9688,264.2506 Q527.3906,264.5475 526.75,264.6881 Q526.1094,264.8444 525.4063,264.8444 Q522.9063,264.8444 521.5781,263.2038 Q520.2656,261.5475 520.2656,258.4225 Q520.2656,255.2975 521.5781,253.6413 Q522.9063,251.985 525.4063,251.985 Q526.1094,251.985 526.75,252.1413 Q527.4063,252.2975 527.9688,252.5944 L527.9688,255.3131 Q527.3438,254.735 526.75,254.4694 Q526.1563,254.1881 525.5313,254.1881 Q524.1875,254.1881 523.5,255.2663 Q522.8125,256.3288 522.8125,258.4225 Q522.8125,260.5163 523.5,261.5944 Q524.1875,262.6569 525.5313,262.6569 Q526.1563,262.6569 526.75,262.3913 Q527.3438,262.11 527.9688,261.5319 L527.9688,264.2506 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="61" x="539" y="262.7643">symMatrix</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="152" x="608" y="239.61"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="150" x="609" y="251.7487">template&lt;typename T&gt;</text><!--MD5=[4e0d036a3e35063714acbbaa3fb465be]
class triangMatrix--><rect fill="#FEFECE" filter="url(#fh0ld6zk0ktva)" height="32" id="triangMatrix" style="stroke: #A80036; stroke-width: 1.5;" width="260" x="952.5" y="242.61"/><ellipse cx="967.5" cy="258.61" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M970.4688,264.2506 Q969.8906,264.5475 969.25,264.6881 Q968.6094,264.8444 967.9063,264.8444 Q965.4063,264.8444 964.0781,263.2038 Q962.7656,261.5475 962.7656,258.4225 Q962.7656,255.2975 964.0781,253.6413 Q965.4063,251.985 967.9063,251.985 Q968.6094,251.985 969.25,252.1413 Q969.9063,252.2975 970.4688,252.5944 L970.4688,255.3131 Q969.8438,254.735 969.25,254.4694 Q968.6563,254.1881 968.0313,254.1881 Q966.6875,254.1881 966,255.2663 Q965.3125,256.3288 965.3125,258.4225 Q965.3125,260.5163 966,261.5944 Q966.6875,262.6569 968.0313,262.6569 Q968.6563,262.6569 969.25,262.3913 Q969.8438,262.11 970.4688,261.5319 L970.4688,264.2506 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="74" x="981.5" y="262.7643">triangMatrix</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="152" x="1063.5" y="239.61"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="150" x="1064.5" y="251.7487">template&lt;typename T&gt;</text><!--MD5=[52cf85cb2c2f5a1e50a6a7e00217dfdd]
class ul_triangMatrix--><rect fill="#FEFECE" filter="url(#fh0ld6zk0ktva)" height="32" id="ul_triangMatrix" style="stroke: #A80036; stroke-width: 1.5;" width="277" x="638" y="426.61"/><ellipse cx="653" cy="442.61" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M655.9688,448.2506 Q655.3906,448.5475 654.75,448.6881 Q654.1094,448.8444 653.4063,448.8444 Q650.9063,448.8444 649.5781,447.2038 Q648.2656,445.5475 648.2656,442.4225 Q648.2656,439.2975 649.5781,437.6413 Q650.9063,435.985 653.4063,435.985 Q654.1094,435.985 654.75,436.1413 Q655.4063,436.2975 655.9688,436.5944 L655.9688,439.3131 Q655.3438,438.735 654.75,438.4694 Q654.1563,438.1881 653.5313,438.1881 Q652.1875,438.1881 651.5,439.2663 Q650.8125,440.3288 650.8125,442.4225 Q650.8125,444.5163 651.5,445.5944 Q652.1875,446.6569 653.5313,446.6569 Q654.1563,446.6569 654.75,446.3913 Q655.3438,446.11 655.9688,445.5319 L655.9688,448.2506 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="91" x="667" y="446.7643">ul_triangMatrix</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="152" x="766" y="423.61"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="150" x="767" y="435.7487">template&lt;typename T&gt;</text><!--MD5=[f4f5cbfc82617ad7591bf28bc610e650]
class uu_triangMatrix--><rect fill="#FEFECE" filter="url(#fh0ld6zk0ktva)" height="32" id="uu_triangMatrix" style="stroke: #A80036; stroke-width: 1.5;" width="282" x="968.5" y="426.61"/><ellipse cx="983.5" cy="442.61" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M986.4688,448.2506 Q985.8906,448.5475 985.25,448.6881 Q984.6094,448.8444 983.9063,448.8444 Q981.4063,448.8444 980.0781,447.2038 Q978.7656,445.5475 978.7656,442.4225 Q978.7656,439.2975 980.0781,437.6413 Q981.4063,435.985 983.9063,435.985 Q984.6094,435.985 985.25,436.1413 Q985.9063,436.2975 986.4688,436.5944 L986.4688,439.3131 Q985.8438,438.735 985.25,438.4694 Q984.6563,438.1881 984.0313,438.1881 Q982.6875,438.1881 982,439.2663 Q981.3125,440.3288 981.3125,442.4225 Q981.3125,444.5163 982,445.5944 Q982.6875,446.6569 984.0313,446.6569 Q984.6563,446.6569 985.25,446.3913 Q985.8438,446.11 986.4688,445.5319 L986.4688,448.2506 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="96" x="997.5" y="446.7643">uu_triangMatrix</text><rect fill="#FFFFFF" height="15.9688" style="stroke: #000000; stroke-width: 1.0; stroke-dasharray: 2.0,2.0;" width="152" x="1101.5" y="423.61"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacingAndGlyphs" textLength="150" x="1102.5" y="435.7487">template&lt;typename T&gt;</text><!--MD5=[6c919788e02595e1e84a019f624b319d]
reverse link MatrixBase to colMajorMatrix--><path d="M577.17,190.49 C544.75,204.33 503.6,223.04 468.5,242.61 C382.04,290.81 368.34,315.62 283.5,366.61 C246.51,388.84 202.43,411.92 173.75,426.5 " fill="none" id="MatrixBase&lt;-colMajorMatrix" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="574.47,184.04,595.62,182.74,579.89,196.94,574.47,184.04" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[49e590bddb4c6e1bd56468ea7f8e358e]
reverse link MatrixBase to diagMatrix--><path d="M561.86,190.47 C536.21,202.13 509.47,218.99 492.5,242.61 C451.22,300.06 454.54,390.75 457.77,426.45 " fill="none" id="MatrixBase&lt;-diagMatrix" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="559.48,183.88,580.64,182.69,564.84,196.81,559.48,183.88" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[c7dc2a3b23fce1c5821742e9643c088e]
reverse link MatrixBase to rowMajorMatrix--><path d="M536.26,186.43 C450.12,203.1 325.99,227.13 246.29,242.55 " fill="none" id="MatrixBase&lt;-rowMajorMatrix" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="534.97,179.55,555.93,182.62,537.63,193.3,534.97,179.55" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[00b8d807e648c68274610a1cb3362984]
reverse link MatrixBase to symMatrix--><path d="M633.5,203.22 C633.5,216.92 633.5,231.83 633.5,242.57 " fill="none" id="MatrixBase&lt;-symMatrix" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="626.5,202.88,633.5,182.88,640.5,202.88,626.5,202.88" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[043a10ece6ba27cd40f9ebb8dfb94a5b]
reverse link MatrixBase to triangMatrix--><path d="M728.18,186.59 C811.33,203.25 930.67,227.18 1007.39,242.55 " fill="none" id="MatrixBase&lt;-triangMatrix" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="726.63,193.42,708.4,182.62,729.39,179.69,726.63,193.42" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[b49767015be111d42fafd64cb3e92bd5]
reverse link MatrixBase to ul_triangMatrix--><path d="M723.62,189.8 C750.41,201.05 776.78,217.81 792.5,242.61 C829.89,301.6 798.51,391.01 783.45,426.41 " fill="none" id="MatrixBase&lt;-ul_triangMatrix" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="720.94,196.27,704.66,182.7,725.85,183.16,720.94,196.27" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[8a555789c5ae7105366797d88f98eb3e]
reverse link MatrixBase to uu_triangMatrix--><path d="M699.73,189.27 C737.29,202.61 784.61,221.24 824.5,242.61 C931.95,300.18 1047.28,390.8 1091.15,426.47 " fill="none" id="MatrixBase&lt;-uu_triangMatrix" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="697.39,195.87,680.79,182.69,701.98,182.64,697.39,195.87" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[3365d4e99d4987fd48e691a697ed8cbf]
reverse link Vector to MatrixBase--><path d="M633.5,111.22 C633.5,124.92 633.5,139.83 633.5,150.57 " fill="none" id="Vector&lt;-MatrixBase" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="626.5,110.88,633.5,90.88,640.5,110.88,626.5,110.88" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[6929eaddb088ac73abd3cd61d2140049]
reverse link rowMajorMatrix to Matrix--><path d="M161.87,294.73 C159.25,308.56 156.39,323.7 154.34,334.57 " fill="none" id="rowMajorMatrix&lt;-Matrix" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="155.03,293.23,165.62,274.88,168.78,295.83,155.03,293.23" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[062dcff14d4d91eb99d87d57d9b78ed0]
reverse link symMatrix to ldl_matrix--><path d="M637.46,295.22 C638.98,308.92 640.64,323.83 641.83,334.57 " fill="none" id="symMatrix&lt;-ldl_matrix" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="630.45,295.53,635.2,274.88,644.36,293.98,630.45,295.53" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[ed8bc81b5832810e166383fae67ccd9c]
reverse link Matrix to colMajorMatrix--><path d="M148.98,379.95 C147.61,395.39 145.96,413.89 144.84,426.57 " fill="none" id="Matrix&lt;-colMajorMatrix" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="150.14,366.88,145.6216,372.5,149.0714,378.8323,153.5898,373.2124,150.14,366.88" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[62dca2606b7a812a31f88295add19a4f]
reverse link Vector to Vector--><path d="M713.77,57.66 C750.28,55.94 782,61.59 782,74.61 C782,89.16 742.36,94.51 700.7,90.64 " fill="none" id="Vector&lt;-Vector" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="700.7,58.58,706.9625,62.1551,712.6712,57.7494,706.4087,54.1743,700.7,58.58" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[87c23268736b0109104c17c7b59854f1]
reverse link colMajorMatrix to colMajorMatrix--><path d="M234.79,425.74 C278.01,423.77 316,429.39 316,442.61 C316,457.16 269.95,462.51 221.56,458.64 " fill="none" id="colMajorMatrix&lt;-colMajorMatrix" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="221.56,426.58,227.7988,430.1962,233.5364,425.8282,227.2976,422.2119,221.56,426.58" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[652dddd1fd79333c6254eba363857daf]
reverse link diagMatrix to diagMatrix--><path d="M544.95,425.71 C584.72,423.84 619.5,429.48 619.5,442.61 C619.5,457.16 576.79,462.51 531.9,458.64 " fill="none" id="diagMatrix&lt;-diagMatrix" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="531.9,426.58,538.1507,430.1757,543.8739,425.7888,537.6232,422.1931,531.9,426.58" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[01f4cbc5d3dea546a42071d4b328a44b]
reverse link ldl_matrix to diagMatrix--><path d="M600.88,372.46 C567.09,388.98 520.68,411.68 490.4,426.5 " fill="none" id="ldl_matrix&lt;-diagMatrix" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="612.7,366.67,605.5533,365.7087,601.9172,371.936,609.0639,372.8973,612.7,366.67" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[2e590febbcfc76a64a7634f1077f07b4]
reverse link ldl_matrix to ul_triangMatrix--><path d="M676.58,374 C700.78,390.37 732.95,412.14 754.17,426.5 " fill="none" id="ldl_matrix&lt;-ul_triangMatrix" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="665.76,366.67,668.4888,373.3448,675.6998,373.3932,672.9709,366.7183,665.76,366.67" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[9d6815212069843e5bb471d98d9b7298]
reverse link ldl_matrix to uu_triangMatrix--><path d="M734.21,369.13 C820.69,385.83 949.56,410.72 1031.54,426.55 " fill="none" id="ldl_matrix&lt;-uu_triangMatrix" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="721.24,366.62,726.3762,371.6815,733.0239,368.8871,727.8877,363.8256,721.24,366.62" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[b9a05f91df6ab841b4ee678d6393a388]
reverse link rowMajorMatrix to rowMajorMatrix--><path d="M260.57,241.76 C304.41,239.75 343,245.36 343,258.61 C343,273.16 296.41,278.51 247.46,274.64 " fill="none" id="rowMajorMatrix&lt;-rowMajorMatrix" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="247.46,242.58,253.6986,246.1967,259.4365,241.829,253.1979,238.2123,247.46,242.58" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[4012c05f32cfbda0c74f49bc7c65c5df]
reverse link symMatrix to symMatrix--><path d="M718.41,241.7 C757.7,239.87 792,245.5 792,258.61 C792,273.16 749.69,278.51 705.22,274.64 " fill="none" id="symMatrix&lt;-symMatrix" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="705.22,242.58,711.4746,246.1688,717.193,241.7756,710.9384,238.1868,705.22,242.58" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[721666fe0d8c89c75f71ff74434003d3]
reverse link internal.tmp to internal.tmp--><path d="M986.53,57.64 C1021.61,55.99 1052,61.65 1052,74.61 C1052,89.16 1013.69,94.51 973.43,90.64 " fill="none" id="internal.tmp&lt;-internal.tmp" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FFFFFF" points="973.43,58.58,979.7003,62.1414,985.3994,57.7232,979.1291,54.1618,973.43,58.58" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[48c01ed9e22cca331bc41ccf987ac236]
reverse link triangMatrix to triangMatrix--><path d="M1170.35,241.72 C1211.48,239.82 1247.5,245.45 1247.5,258.61 C1247.5,273.16 1203.45,278.51 1157.16,274.64 " fill="none" id="triangMatrix&lt;-triangMatrix" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="1157.16,242.58,1163.4067,246.1825,1169.1347,241.8019,1162.888,238.1994,1157.16,242.58" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[f2eecb54a2793922aea70bdf03410f50]
reverse link ul_triangMatrix to ul_triangMatrix--><path d="M868.04,425.76 C911.63,423.75 950,429.36 950,442.61 C950,457.16 903.68,462.51 855.01,458.64 " fill="none" id="ul_triangMatrix&lt;-ul_triangMatrix" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="855.01,426.58,861.2488,430.1962,866.9864,425.8282,860.7476,422.2119,855.01,426.58" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[add3911a0973776ceba1424f8a7d4446]
reverse link uu_triangMatrix to uu_triangMatrix--><path d="M1202.36,425.76 C1246.58,423.75 1285.5,429.36 1285.5,442.61 C1285.5,457.16 1238.51,462.51 1189.14,458.64 " fill="none" id="uu_triangMatrix&lt;-uu_triangMatrix" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="1189.14,426.58,1195.3748,430.2031,1201.1172,425.8413,1194.8824,422.2182,1189.14,426.58" style="stroke: #A80036; stroke-width: 1.0;"/><!--MD5=[cb3f0522fe60da0eee04cf4e55adb74b]
@startuml
hide members
hide methods






class Matrix <template<typename TT>> {
	+Matrix()
	+Matrix(const size_t rows, const size_t cols)
	+Matrix(TT* data, const size_t rows, const size_t cols, const bool share)
	+Matrix(const Matrix<TT>& other)
	+Matrix(const Matrix<U>& other)
	+Matrix(const rowMajorMatrix<TT>& other)
	+Matrix(const rowMajorMatrix<U>& other)
	+Matrix(const colMajorMatrix<TT>& other)
	+Matrix(const colMajorMatrix<U>& other)
	+Matrix(internal::tmp<rowMajorMatrix<TT>>&& other)
	+Matrix(internal::tmp<colMajorMatrix<TT>>&& other)
	+operator*=(const U& data) : Matrix<TT>*
	+operator*=(const rowMajorMatrix<U>& other) : Matrix<TT>*
	+operator*=(internal::tmp<rowMajorMatrix<U>>&& other) : Matrix<TT>*
	+operator*=(const colMajorMatrix<U>& other) : Matrix<TT>*
	+operator*=(internal::tmp<colMajorMatrix<U>>&& other) : Matrix<TT>*
	+operator+=(const U& data) : Matrix<TT>*
	+operator+=(const rowMajorMatrix<U>& other) : Matrix<TT>*
	+operator+=(internal::tmp<rowMajorMatrix<U>>&& other) : Matrix<TT>*
	+operator+=(const colMajorMatrix<U>& other) : Matrix<TT>*
	+operator+=(internal::tmp<colMajorMatrix<U>>&& other) : Matrix<TT>*
	+operator-=(const U& data) : Matrix<TT>*
	+operator-=(const rowMajorMatrix<U>& other) : Matrix<TT>*
	+operator-=(internal::tmp<rowMajorMatrix<U>>&& other) : Matrix<TT>*
	+operator-=(const colMajorMatrix<U>& other) : Matrix<TT>*
	+operator-=(internal::tmp<colMajorMatrix<U>>&& other) : Matrix<TT>*
	+operator/=(const U& data) : Matrix<TT>*
	+operator=(const rowMajorMatrix<U>& other) : Matrix<TT>*
	+operator=(internal::tmp<rowMajorMatrix<U>>&& other) : Matrix<TT>*
	+operator=(const colMajorMatrix<U>& other) : Matrix<TT>*
	+operator=(internal::tmp<colMajorMatrix<U>>&& other) : Matrix<TT>*
	+referT() : Matrix<TT>*
	+resize(const size_t rows, const size_t cols, const bool deallocIfPossible, const bool saveData) : Matrix<TT>*
	#swap(Matrix<TT>& other) : Matrix<TT>*
	+T : colMajorMatrix<TT>
}


abstract class MatrixBase <template<typename T=float>> {
	+MatrixBase()
	+MatrixBase(const size_t rows, const size_t cols)
	#checkOverlap(const MatrixBase<U>& a, const MatrixBase<V>& b) : MatrixBase<T>*
	#checkSize_add(const MatrixBase<U>& a, const MatrixBase<V>& b) : MatrixBase<T>*
	#checkSize_mul(const MatrixBase<U>& a, const MatrixBase<V>& b) : MatrixBase<T>*
	+fill(const T value) : MatrixBase<T>*
	#refer(const Vector<T>& data, const size_t rows, const size_t cols) : MatrixBase<T>*
	#refer(const T* data, const size_t rows, const size_t cols) : MatrixBase<T>*
	+resize(const size_t rows, const size_t cols, const bool deallocIfPossible, const bool saveData) : MatrixBase<T>*
	+resizeLike(const MatrixBase<U>& other, const bool deallocIfPossible, const bool saveData) : MatrixBase<T>*
	#swap(MatrixBase<T>& other) : MatrixBase<T>*
	+{abstract} operator()(const size_t row, const size_t col) : T&
	+operator()(const size_t row, const size_t col) : T& {query}
	+isAdditionCompatible(const MatrixBase<U>& other) : bool {query}
	+isMultiplicationCompatible(const MatrixBase<U>& other) : bool {query}
	#_cols : size_t
	#_rows : size_t
	+cols() : size_t {query}
	#{abstract} minMemorySize(const size_t rows, const size_t cols) : size_t {query}
	#minMemorySize() : size_t {query}
	+rows() : size_t {query}
}


class Vector <template<typename T>> {
	+Vector()
	+Vector(const size_t N)
	+Vector(internal::tmp<Vector>&& v)
	+Vector(internal::tmp<Vector<U>>&& v)
	+Vector(const Vector& v, const bool share)
	+Vector(T* begin, const size_t N, const bool share)
	+~Vector()
	+operator[](size_t i) : T {query}
	+operator[](const size_t i) : T&
	#_begin : T*
	#_end : T*
	#_endOfStorage : T*
	+begin() : T* {query}
	+end() : T* {query}
	+dot(const Vector<U>& other, const bool checkSize) : V
	+addMul(const rowMajorMatrix<U>& a, const Vector<V>& b, const bool checkSize) : Vector*
	#allocate(const size_t capacity, const bool deallocIfPossible, const bool saveData) : Vector*
	+fill(const T val) : Vector*
	+hold(T* begin, const size_t N, const bool checkSize) : Vector*
	+hold(const Vector& v, const bool checkSize) : Vector*
	+hold(const Vector<U>& v, const bool checkSize) : Vector*
	+holdAdd(const Vector<U>& v1, const Vector<V>& v2, const bool checkSize) : Vector*
	+holdAdd(const Vector<U>& v1, const T val, const bool checkSize) : Vector*
	+holdDiv(const Vector<U>& v1, const Vector<V>& v2, const bool checkSize) : Vector*
	+holdDiv(const T val, const Vector<U>& v, const bool checkSize) : Vector*
	+holdMul(const MatrixBase<U>& a, const Vector<V>& b, const bool checkSize) : Vector*
	+holdMul(const rowMajorMatrix<U>& a, const Vector<V>& b, const bool checkSize) : Vector*
	+holdMul(const Vector<U>& v1, const Vector<V>& v2, const bool checkSize) : Vector*
	+holdMul(const Vector<U>& v1, const V val, const bool checkSize) : Vector*
	+holdSub(const Vector<U>& v1, const Vector<V>& v2, const bool checkSize) : Vector*
	+holdSub(const Vector<U>& v1, const T val, const bool checkSize) : Vector*
	+holdSub(const T val, const Vector<U>& v, const bool checkSize) : Vector*
	+insert(const T& value, const size_t index) : Vector*
	+operator*=(const Vector<U>& v) : Vector*
	+operator*=(const T& val) : Vector*
	+operator*=(internal::tmp<Vector<T>>&& v) : Vector*
	+operator+=(const Vector<U>& v) : Vector*
	+operator+=(const T& val) : Vector*
	+operator+=(internal::tmp<Vector<U>>&& v) : Vector*
	+operator-=(const Vector<U>& v) : Vector*
	+operator-=(const T& val) : Vector*
	+operator-=(internal::tmp<Vector<U>>&& v) : Vector*
	+operator/=(const Vector<U>& v) : Vector*
	+operator/=(const T& val) : Vector*
	+operator/=(internal::tmp<Vector<U>>&& v) : Vector*
	+operator=(const Vector& v) : Vector*
	+operator=(const Vector<U>& v) : Vector*
	+operator=(internal::tmp<Vector>&& v) : Vector*
	+operator=(internal::tmp<Vector<U>>&& v) : Vector*
	+pop_back() : Vector*
	+push_back(const T& value) : Vector*
	#refer(const Vector& other) : Vector*
	#refer(T* data, size_t length) : Vector*
	+removeAt(const size_t index) : Vector*
	+removeFirst(const T& value) : Vector*
	+removeLast(const T& value) : Vector*
	+resize(const size_t N, const bool deallocateIfPossible, const bool saveData) : Vector*
	+sort(const bool ascending) : Vector*
	#swap(Vector& other) : Vector*
	+findAll(const T& value, Vector<size_t>& indices_holder) : Vector<size_t>* {query}
	+operator!=(const Vector<U>& v) : bool {query}
	+operator!=(const T val) : bool {query}
	+operator==(const Vector<U>& v) : bool {query}
	+operator==(const T val) : bool {query}
	#overlap(const Vector<U>& other) : bool {query}
	+shared() : bool {query}
	+capacity() : size_t {query}
	+findFirst(const T& value) : size_t {query}
	+findLast(const T& value) : size_t {query}
	#minMemorySize(const size_t N) : size_t {query}
	+size() : size_t {query}
	#{static} staticHelper : static const Vector
}


class colMajorMatrix <template<typename T>> {
	+colMajorMatrix()
	+colMajorMatrix(const size_t rows, const size_t cols)
	+colMajorMatrix(T* data, const size_t rows, const size_t cols, const bool share)
	+colMajorMatrix(const colMajorMatrix& other)
	+colMajorMatrix(const colMajorMatrix<U>& other)
	+colMajorMatrix(internal::tmp<colMajorMatrix<T>>&& other)
	+colMajorMatrix(internal::tmp<colMajorMatrix<U>>&& other)
	+colMajorMatrix(const rowMajorMatrix<U>& other)
	+colMajorMatrix(internal::tmp<rowMajorMatrix<U>>&& other)
	+operator()(const size_t row, const size_t col) : T&
	+hold(const colMajorMatrix& other, const bool checkSize) : colMajorMatrix*
	+operator=(internal::tmp<colMajorMatrix>&& other) : colMajorMatrix*
	+hold(const colMajorMatrix<U>& other, const bool checkSize) : colMajorMatrix<T>*
	+hold(const rowMajorMatrix<U>& other, const bool checkSize) : colMajorMatrix<T>*
	+holdAdd(const colMajorMatrix<U>& a, const T& b, const bool checkSize) : colMajorMatrix<T>*
	+holdAdd(const colMajorMatrix<U>& a, const colMajorMatrix<V>& b, const bool checkSize) : colMajorMatrix<T>*
	+holdAdd(const rowMajorMatrix<U>& a, const rowMajorMatrix<V>& b, const bool checkSize) : colMajorMatrix<T>*
	+holdAdd(const colMajorMatrix<U>& a, const rowMajorMatrix<V>& b, const bool checkSize) : colMajorMatrix<T>*
	+holdMul(const colMajorMatrix<U>& a, const T& b, const bool checkSize) : colMajorMatrix<T>*
	+holdMul(const colMajorMatrix<U>& a, const colMajorMatrix<V>& b, const bool checkSize, const bool checkOverlap) : colMajorMatrix<T>*
	+holdMul(const rowMajorMatrix<U>& a, const rowMajorMatrix<V>& b, const bool checkSize, const bool checkOverlap) : colMajorMatrix<T>*
	+holdMul(const colMajorMatrix<U>& a, const rowMajorMatrix<V>& b, const bool checkSize, const bool checkOverlap) : colMajorMatrix<T>*
	+holdMul(const rowMajorMatrix<U>& a, const colMajorMatrix<V>& b, const bool checkSize, const bool checkOverlap) : colMajorMatrix<T>*
	+holdSub(const colMajorMatrix<U>& a, const T& b, const bool checkSize) : colMajorMatrix<T>*
	+holdSub(const T& a, const colMajorMatrix<U>& b, const bool checkSize) : colMajorMatrix<T>*
	+holdSub(const colMajorMatrix<U>& a, const colMajorMatrix<V>& b, const bool checkSize) : colMajorMatrix<T>*
	+holdSub(const rowMajorMatrix<U>& a, const rowMajorMatrix<V>& b, const bool checkSize) : colMajorMatrix<T>*
	+holdSub(const colMajorMatrix<U>& a, const rowMajorMatrix<V>& b, const bool checkSize) : colMajorMatrix<T>*
	+holdSub(const rowMajorMatrix<U>& a, const colMajorMatrix<V>& b, const bool checkSize) : colMajorMatrix<T>*
	+operator*=(const T& data) : colMajorMatrix<T>*
	+operator*=(const colMajorMatrix<U>& other) : colMajorMatrix<T>*
	+operator*=(internal::tmp<colMajorMatrix<U>>&& other) : colMajorMatrix<T>*
	+operator*=(const rowMajorMatrix<U>& other) : colMajorMatrix<T>*
	+operator*=(internal::tmp<rowMajorMatrix<U>>&& other) : colMajorMatrix<T>*
	+operator+=(const T& data) : colMajorMatrix<T>*
	+operator+=(const colMajorMatrix<U>& other) : colMajorMatrix<T>*
	+operator+=(internal::tmp<colMajorMatrix<U>>&& other) : colMajorMatrix<T>*
	+operator+=(const rowMajorMatrix<U>& other) : colMajorMatrix<T>*
	+operator+=(internal::tmp<rowMajorMatrix<U>>&& other) : colMajorMatrix<T>*
	+operator-=(const T& data) : colMajorMatrix<T>*
	+operator-=(const colMajorMatrix<U>& other) : colMajorMatrix<T>*
	+operator-=(internal::tmp<colMajorMatrix<U>>&& other) : colMajorMatrix<T>*
	+operator-=(const rowMajorMatrix<U>& other) : colMajorMatrix<T>*
	+operator-=(internal::tmp<rowMajorMatrix<U>>&& other) : colMajorMatrix<T>*
	+operator/=(const T& data) : colMajorMatrix<T>*
	+operator=(const colMajorMatrix<T>& other) : colMajorMatrix<T>*
	+operator=(const colMajorMatrix<U>& other) : colMajorMatrix<T>*
	+operator=(internal::tmp<colMajorMatrix<U>>&& other) : colMajorMatrix<T>*
	+operator=(const rowMajorMatrix<U>& other) : colMajorMatrix<T>*
	+operator=(internal::tmp<rowMajorMatrix<U>>&& other) : colMajorMatrix<T>*
	#refer(colMajorMatrix<T>& other) : colMajorMatrix<T>*
	#swap(colMajorMatrix<T>& other) : colMajorMatrix<T>*
	#{static} staticHelper : const static colMajorMatrix<T>
	#minMemorySize(const size_t rows, const size_t cols) : size_t {query}
}


class diagMatrix <template<typename T>> {
	+diagMatrix(const size_t rows, const size_t cols)
	+diagMatrix(const size_t size)
	+diagMatrix()
	+det() : T {query}
	+operator()(const size_t row, const size_t col) : T&
	+operator()(const size_t row, const size_t col) : T& {query}
	+holdInv(const diagMatrix<U>& other, const bool checkSize) : diagMatrix*
	+operator*=(const T& data) : diagMatrix*
	+operator*=(const diagMatrix<U>& other) : diagMatrix*
	+operator*=(internal::tmp<diagMatrix<U>>&& other) : diagMatrix*
	+operator+=(const T& data) : diagMatrix*
	+operator+=(const diagMatrix<U>& other) : diagMatrix*
	+operator+=(internal::tmp<diagMatrix<U>>&& other) : diagMatrix*
	+operator-=(const T& data) : diagMatrix*
	+operator-=(const diagMatrix<U>& other) : diagMatrix*
	+operator-=(internal::tmp<diagMatrix<U>>&& other) : diagMatrix*
	+operator/=(const T& data) : diagMatrix*
	+operator=(const diagMatrix& other) : diagMatrix*
	+operator=(const diagMatrix<U>& other) : diagMatrix*
	+operator=(internal::tmp<diagMatrix>&& other) : diagMatrix*
	+operator=(internal::tmp<diagMatrix<U>>&& other) : diagMatrix*
	+checkIsSquare() : diagMatrix<T>* {query}
	+hold(const diagMatrix<T>& other, const bool checkSize) : diagMatrix<T>*
	+hold(const diagMatrix<U>& other, const bool checkSize) : diagMatrix<T>*
	+holdAdd(const diagMatrix<U>& a, const T& b, const bool checkSize) : diagMatrix<T>*
	+holdAdd(const diagMatrix<U>& a, const diagMatrix<V>& b, const bool checkSize) : diagMatrix<T>*
	+holdDiv(const diagMatrix<U>& a, const T& b, const bool checkSize) : diagMatrix<T>*
	+holdInv(const T val, const diagMatrix<U>& other, const bool checkSize) : diagMatrix<T>*
	+holdMul(const diagMatrix<U>& a, const T& b, const bool checkSize) : diagMatrix<T>*
	+holdMul(const diagMatrix<U>& a, const diagMatrix<V>& b, const bool checkSize) : diagMatrix<T>*
	+holdSub(const diagMatrix<U>& a, const T& b, const bool checkSize) : diagMatrix<T>*
	+holdSub(const T& a, const diagMatrix<U>& b, const bool checkSize) : diagMatrix<T>*
	+holdSub(const diagMatrix<U>& a, const diagMatrix<V>& b, const bool checkSize) : diagMatrix<T>*
	#swap(diagMatrix<T>& other) : diagMatrix<T>*
	#minMemorySize(const size_t rows, const size_t cols) : size_t {query}
	#{static} staticHelper : static const diagMatrix<T>
}


class ldl_matrix <template<typename T>> {
	+ldl_matrix()
	+ldl_matrix(const size_t order)
	+D : diagMatrix<T>
	+decompose() : ldl_matrix<T>*
	+referT() : ldl_matrix<T>*
	+resize(const size_t order, const bool deallocIfPossible, const bool saveData) : ldl_matrix<T>*
	+L : ul_triangMatrix<T>
	+LT : uu_triangMatrix<T>
}


class rowMajorMatrix <template<typename T>> {
	+rowMajorMatrix()
	+rowMajorMatrix(const size_t rows, const size_t cols)
	+rowMajorMatrix(T* data, const size_t rows, const size_t cols, const bool share)
	+rowMajorMatrix(const rowMajorMatrix& other)
	+rowMajorMatrix(const rowMajorMatrix<U>& other)
	+rowMajorMatrix(internal::tmp<rowMajorMatrix<T>>&& other)
	+rowMajorMatrix(internal::tmp<rowMajorMatrix<U>>&& other)
	+rowMajorMatrix(const colMajorMatrix<U>& other)
	+rowMajorMatrix(const internal::tmp<colMajorMatrix<U>>& other)
	+operator()(const size_t row, const size_t col) : T&
	+operator()(const size_t row, const size_t col) : T& {query}
	+hold(const rowMajorMatrix& other, const bool checkSize) : rowMajorMatrix*
	+operator*=(const T& data) : rowMajorMatrix*
	+operator+=(const T& data) : rowMajorMatrix*
	+operator-=(const T& data) : rowMajorMatrix*
	+operator/=(const T& data) : rowMajorMatrix*
	+operator=(internal::tmp<rowMajorMatrix>&& other) : rowMajorMatrix*
	+hold(const rowMajorMatrix<U>& other, const bool checkSize) : rowMajorMatrix<T>*
	+hold(const colMajorMatrix<U>& other, const bool checkSize) : rowMajorMatrix<T>*
	+hold(const diagMatrix<U>& other, const bool checkSize) : rowMajorMatrix<T>*
	+holdAdd(const rowMajorMatrix<U>& a, const T& b, const bool checkSize) : rowMajorMatrix<T>*
	+holdAdd(const rowMajorMatrix<U>& a, const rowMajorMatrix<V>& b, const bool checkSize) : rowMajorMatrix<T>*
	+holdAdd(const colMajorMatrix<U>& a, const colMajorMatrix<V>& b, const bool checkSize) : rowMajorMatrix<T>*
	+holdAdd(const rowMajorMatrix<U>& a, const colMajorMatrix<V>& b, const bool checkSize) : rowMajorMatrix<T>*
	+holdAdd(const rowMajorMatrix<U>& a, const diagMatrix<V>& b, const bool checkSize) : rowMajorMatrix<T>*
	+holdDiv(const rowMajorMatrix<U>& a, const diagMatrix<V>& b, const bool checkSize) : rowMajorMatrix<T>*
	+holdMul(const rowMajorMatrix<U>& a, const T& b, const bool checkSize) : rowMajorMatrix<T>*
	+holdMul(const rowMajorMatrix<U>& a, const rowMajorMatrix<V>& b, const bool checkSize, const bool checkOverlap) : rowMajorMatrix<T>*
	+holdMul(const colMajorMatrix<U>& a, const colMajorMatrix<V>& b, const bool checkSize, const bool checkOverlap) : rowMajorMatrix<T>*
	+holdMul(const rowMajorMatrix<U>& a, const colMajorMatrix<V>& b, const bool checkSize, const bool checkOverlap) : rowMajorMatrix<T>*
	+holdMul(const colMajorMatrix<U>& a, const rowMajorMatrix<V>& b, const bool checkSize, const bool checkOverlap) : rowMajorMatrix<T>*
	+holdMul(const rowMajorMatrix<U>& a, const diagMatrix<V>& b, const bool checkSize) : rowMajorMatrix<T>*
	+holdMul(const diagMatrix<U>& a, const rowMajorMatrix<V>& b, const bool checkSize) : rowMajorMatrix<T>*
	+holdMul(const rowMajorMatrix<U>& a, const symMatrix<V>& b, const bool checkSize) : rowMajorMatrix<T>*
	+holdMul(const colMajorMatrix<U>& a, const symMatrix<V>& b, const bool checkSize) : rowMajorMatrix<T>*
	+holdSub(const rowMajorMatrix<U>& a, const T& b, const bool checkSize) : rowMajorMatrix<T>*
	+holdSub(const T& a, const rowMajorMatrix<U>& b, const bool checkSize) : rowMajorMatrix<T>*
	+holdSub(const rowMajorMatrix<U>& a, const rowMajorMatrix<V>& b, const bool checkSize) : rowMajorMatrix<T>*
	+holdSub(const colMajorMatrix<U>& a, const colMajorMatrix<V>& b, const bool checkSize) : rowMajorMatrix<T>*
	+holdSub(const rowMajorMatrix<U>& a, const colMajorMatrix<V>& b, const bool checkSize) : rowMajorMatrix<T>*
	+holdSub(const colMajorMatrix<U>& a, const rowMajorMatrix<V>& b, const bool checkSize) : rowMajorMatrix<T>*
	+holdSub(const rowMajorMatrix<U>& a, const diagMatrix<V>& b, const bool checkSize) : rowMajorMatrix<T>*
	+holdSub(const diagMatrix<U>& a, const rowMajorMatrix<V>& b, const bool checkSize) : rowMajorMatrix<T>*
	+operator*=(const rowMajorMatrix<U>& other) : rowMajorMatrix<T>*
	+operator*=(internal::tmp<rowMajorMatrix<U>>&& other) : rowMajorMatrix<T>*
	+operator*=(const colMajorMatrix<U>& other) : rowMajorMatrix<T>*
	+operator*=(internal::tmp<colMajorMatrix<U>>&& other) : rowMajorMatrix<T>*
	+operator*=(const diagMatrix<U>& other) : rowMajorMatrix<T>*
	+operator+=(const rowMajorMatrix<U>& other) : rowMajorMatrix<T>*
	+operator+=(internal::tmp<rowMajorMatrix<U>>&& other) : rowMajorMatrix<T>*
	+operator+=(const colMajorMatrix<U>& other) : rowMajorMatrix<T>*
	+operator+=(internal::tmp<colMajorMatrix<U>>&& other) : rowMajorMatrix<T>*
	+operator+=(const diagMatrix<U>& other) : rowMajorMatrix<T>*
	+operator-=(const rowMajorMatrix<U>& other) : rowMajorMatrix<T>*
	+operator-=(internal::tmp<rowMajorMatrix<U>>&& other) : rowMajorMatrix<T>*
	+operator-=(const colMajorMatrix<U>& other) : rowMajorMatrix<T>*
	+operator-=(internal::tmp<colMajorMatrix<U>>&& other) : rowMajorMatrix<T>*
	+operator-=(const diagMatrix<U>& other) : rowMajorMatrix<T>*
	+operator/=(const diagMatrix<U>& other) : rowMajorMatrix<T>*
	+operator=(const rowMajorMatrix<T>& other) : rowMajorMatrix<T>*
	+operator=(const rowMajorMatrix<U>& other) : rowMajorMatrix<T>*
	+operator=(internal::tmp<rowMajorMatrix<U>>&& other) : rowMajorMatrix<T>*
	+operator=(const colMajorMatrix<U>& other) : rowMajorMatrix<T>*
	+operator=(internal::tmp<colMajorMatrix<U>>&& other) : rowMajorMatrix<T>*
	+operator=(const diagMatrix<U>& other) : rowMajorMatrix<T>*
	#refer(rowMajorMatrix<T>& other) : rowMajorMatrix<T>*
	#swap(rowMajorMatrix<T>& other) : rowMajorMatrix<T>*
	#minMemorySize(const size_t rows, const size_t cols) : size_t {query}
	#{static} staticHelper : static const rowMajorMatrix<T>
}


class symMatrix <template<typename T>> {
	+symMatrix()
	+symMatrix(const size_t order)
	+symMatrix(const size_t rows, const size_t cols)
	+operator()(const size_t row, const size_t col) : T&
	#minMemorySize(const size_t order) : size_t {query}
	#minMemorySize(const size_t rows, const size_t cols) : size_t {query}
	#{static} staticHelper : static const symMatrix<T>
	+addMul(const rowMajorMatrix<U>& a, const rowMajorMatrix<U>& b, const bool checkSize, const bool checkOverlap) : symMatrix*
	+addMul(const rowMajorMatrix<U>& a, const colMajorMatrix<V>& b, const bool checkSize) : symMatrix*
	+hold(const symMatrix& other, const bool checkSize) : symMatrix*
	+hold(const symMatrix<U>& other, const bool checkSize) : symMatrix*
	+hold(const rowMajorMatrix<U>& other, const bool checkSize) : symMatrix*
	+holdAdd(const symMatrix<U>& a, const symMatrix<V>& b, const bool checkSize) : symMatrix*
	+holdAdd(const rowMajorMatrix<U>& a, const symMatrix<V>& b, const bool checkSize) : symMatrix*
	+holdInv(ldl_matrix<U>& other, const bool checkSize) : symMatrix*
	+holdMul(const symMatrix<U>& a, const symMatrix<V>& b, const bool checkSize, const bool checkOverlap) : symMatrix*
	+holdMul(const rowMajorMatrix<U>& a, const rowMajorMatrix<U>& b, const bool checkSize, const bool checkOverlap) : symMatrix*
	+holdMul(const rowMajorMatrix<U>& a, const symMatrix<V>& b, const bool checkSize, const bool checkOverlap) : symMatrix*
	+holdMul(const symMatrix<U>& a, const rowMajorMatrix<V>& b, const bool checkSize, const bool checkOverlap) : symMatrix*
	+holdMul(const rowMajorMatrix<U>& a, const colMajorMatrix<V>& b, const bool checkSize) : symMatrix*
	+holdMul(const triangMatrix<U>& a, const uu_triangMatrix<U>& b, const bool checkSize) : symMatrix*
	+holdSub(const symMatrix<U>& a, const symMatrix<V>& b, const bool checkSize) : symMatrix*
	+holdSub(const rowMajorMatrix<U>& a, const symMatrix<V>& b, const bool checkSize) : symMatrix*
	+holdSub(const symMatrix<U>& a, const rowMajorMatrix<V>& b, const bool checkSize) : symMatrix*
	+operator*=(const T& data) : symMatrix*
	+operator*=(const symMatrix<U>& other) : symMatrix*
	+operator*=(internal::tmp<symMatrix<U>>&& other) : symMatrix*
	+operator*=(const rowMajorMatrix<U>& other) : symMatrix*
	+operator*=(internal::tmp<rowMajorMatrix<U>>&& other) : symMatrix*
	+operator+=(const T& data) : symMatrix*
	+operator+=(const symMatrix<U>& other) : symMatrix*
	+operator+=(internal::tmp<symMatrix<U>>&& other) : symMatrix*
	+operator+=(const rowMajorMatrix<U>& other) : symMatrix*
	+operator+=(internal::tmp<rowMajorMatrix<U>>&& other) : symMatrix*
	+operator-=(const T& data) : symMatrix*
	+operator-=(const symMatrix<U>& other) : symMatrix*
	+operator-=(internal::tmp<symMatrix<U>>&& other) : symMatrix*
	+operator-=(const rowMajorMatrix<U>& other) : symMatrix*
	+operator-=(internal::tmp<rowMajorMatrix<U>>&& other) : symMatrix*
	+operator/=(const T& data) : symMatrix*
	+operator=(const symMatrix& other) : symMatrix*
	+operator=(const symMatrix<U>& other) : symMatrix*
	+operator=(internal::tmp<symMatrix>&& other) : symMatrix*
	+operator=(internal::tmp<symMatrix<U>>&& other) : symMatrix*
	+operator=(const rowMajorMatrix<U>& other) : symMatrix*
	+operator=(internal::tmp<rowMajorMatrix<U>>&& other) : symMatrix*
	+subMul(const rowMajorMatrix<U>& a, const rowMajorMatrix<U>& b, const bool checkSize, const bool checkOverlap) : symMatrix*
	#swap(symMatrix& other) : symMatrix*
	+holdAdd(const symMatrix<U>& a, const T& b, const bool checkSize) : symMatrix<T>*
	+holdMul(const symMatrix<U>& a, const T& b, const bool checkSize) : symMatrix<T>*
	+holdSub(const symMatrix<U>& a, const T& b, const bool checkSize) : symMatrix<T>*
	+holdSub(const T& a, const symMatrix<U>& b, const bool checkSize) : symMatrix<T>*
}


class triangMatrix <template<typename T>> {
	+triangMatrix()
	+triangMatrix(const size_t order)
	+operator()(const size_t row, const size_t col) : T&
	+operator()(const size_t row, const size_t col) : T& {query}
	#minMemorySize(const size_t order) : size_t {query}
	#minMemorySize(const size_t rows, const size_t cols) : size_t {query}
	#{static} staticHelper : static const triangMatrix<T>
	+hold(const triangMatrix& other, const bool checkSize) : triangMatrix*
	+hold(const triangMatrix<U>& other, const bool checkSize) : triangMatrix*
	+holdAdd(const triangMatrix<U>& a, const T& b, const bool checkSize) : triangMatrix*
	+holdAdd(const triangMatrix<U>& a, const triangMatrix<V>& b, const bool checkSize) : triangMatrix*
	+holdDiv(const triangMatrix<U>& a, const T& b, const bool checkSize) : triangMatrix*
	+holdMul(const triangMatrix<U>& a, const T& b, const bool checkSize) : triangMatrix*
	+holdMul(const triangMatrix<U>& a, const triangMatrix<V>& b, const bool checkSize, const bool checkOverlap) : triangMatrix*
	+holdMul(const ul_triangMatrix<U>& a, const diagMatrix<V>& b, const bool checkSize) : triangMatrix*
	+holdSub(const triangMatrix<U>& a, const T& b, const bool checkSize) : triangMatrix*
	+holdSub(const T& a, const triangMatrix<U>& b, const bool checkSize) : triangMatrix*
	+holdSub(const triangMatrix<U>& a, const triangMatrix<V>& b, const bool checkSize) : triangMatrix*
	+operator*=(const T& data) : triangMatrix*
	+operator*=(const triangMatrix<U>& other) : triangMatrix*
	+operator*=(internal::tmp<triangMatrix<U>>&& other) : triangMatrix*
	+operator+=(const T& data) : triangMatrix*
	+operator+=(const triangMatrix<U>& other) : triangMatrix*
	+operator+=(internal::tmp<triangMatrix<U>>&& other) : triangMatrix*
	+operator-=(const T& data) : triangMatrix*
	+operator-=(const triangMatrix<U>& other) : triangMatrix*
	+operator-=(internal::tmp<triangMatrix<U>>&& other) : triangMatrix*
	+operator/=(const T& data) : triangMatrix*
	+operator=(const triangMatrix& other) : triangMatrix*
	+operator=(const triangMatrix<U>& other) : triangMatrix*
	+operator=(internal::tmp<triangMatrix>&& other) : triangMatrix*
	+operator=(internal::tmp<triangMatrix<U>>&& other) : triangMatrix*
	#swap(triangMatrix& other) : triangMatrix*
}


class ul_triangMatrix <template<typename T>> {
	+ul_triangMatrix()
	+ul_triangMatrix(const size_t order)
	+operator()(const size_t row, const size_t col) : T&
	+operator()(const size_t row, const size_t col) : T& {query}
	#minMemorySize(const size_t order) : size_t {query}
	#minMemorySize(const size_t rows, const size_t cols) : size_t {query}
	#{static} staticHelper : static const ul_triangMatrix<T>
	+hold(const ul_triangMatrix& other, const bool checkSize) : ul_triangMatrix*
	+hold(const ul_triangMatrix<U>& other, const bool checkSize) : ul_triangMatrix*
	+holdAdd(const ul_triangMatrix<U>& a, const T& b, const bool checkSize) : ul_triangMatrix*
	+holdAdd(const ul_triangMatrix<U>& a, const ul_triangMatrix<V>& b, const bool checkSize) : ul_triangMatrix*
	+holdDiv(const ul_triangMatrix<U>& a, const T& b, const bool checkSize) : ul_triangMatrix*
	+holdInv(const ul_triangMatrix<U>& other, const bool checkSize) : ul_triangMatrix*
	+holdMul(const ul_triangMatrix<U>& a, const T& b, const bool checkSize) : ul_triangMatrix*
	+holdMul(const ul_triangMatrix<U>& a, const ul_triangMatrix<V>& b, const bool checkSize, const bool checkOverlap) : ul_triangMatrix*
	+holdSub(const ul_triangMatrix<U>& a, const T& b, const bool checkSize) : ul_triangMatrix*
	+holdSub(const T& a, const ul_triangMatrix<U>& b, const bool checkSize) : ul_triangMatrix*
	+holdSub(const ul_triangMatrix<U>& a, const ul_triangMatrix<V>& b, const bool checkSize) : ul_triangMatrix*
	+operator*=(const T& data) : ul_triangMatrix*
	+operator*=(const ul_triangMatrix<U>& other) : ul_triangMatrix*
	+operator*=(internal::tmp<ul_triangMatrix<U>>&& other) : ul_triangMatrix*
	+operator+=(const T& data) : ul_triangMatrix*
	+operator+=(const ul_triangMatrix<U>& other) : ul_triangMatrix*
	+operator+=(internal::tmp<ul_triangMatrix<U>>&& other) : ul_triangMatrix*
	+operator-=(const T& data) : ul_triangMatrix*
	+operator-=(const ul_triangMatrix<U>& other) : ul_triangMatrix*
	+operator-=(internal::tmp<ul_triangMatrix<U>>&& other) : ul_triangMatrix*
	+operator/=(const T& data) : ul_triangMatrix*
	+operator=(const ul_triangMatrix& other) : ul_triangMatrix*
	+operator=(const ul_triangMatrix<U>& other) : ul_triangMatrix*
	+operator=(internal::tmp<ul_triangMatrix>&& other) : ul_triangMatrix*
	+operator=(internal::tmp<ul_triangMatrix<U>>&& other) : ul_triangMatrix*
	#swap(ul_triangMatrix& other) : ul_triangMatrix*
}


class uu_triangMatrix <template<typename T>> {
	+uu_triangMatrix()
	+uu_triangMatrix(const size_t order)
	+operator()(const size_t row, const size_t col) : T&
	+operator()(const size_t row, const size_t col) : T& {query}
	#minMemorySize(const size_t order) : size_t {query}
	#minMemorySize(const size_t rows, const size_t cols) : size_t {query}
	#{static} staticHelper : static const uu_triangMatrix<T>
	+hold(const uu_triangMatrix& other, const bool checkSize) : uu_triangMatrix*
	+hold(const uu_triangMatrix<U>& other, const bool checkSize) : uu_triangMatrix*
	+holdAdd(const uu_triangMatrix<U>& a, const T& b, const bool checkSize) : uu_triangMatrix*
	+holdAdd(const uu_triangMatrix<U>& a, const uu_triangMatrix<V>& b, const bool checkSize) : uu_triangMatrix*
	+holdDiv(const uu_triangMatrix<U>& a, const T& b, const bool checkSize) : uu_triangMatrix*
	+holdMul(const uu_triangMatrix<U>& a, const T& b, const bool checkSize) : uu_triangMatrix*
	+holdSub(const uu_triangMatrix<U>& a, const T& b, const bool checkSize) : uu_triangMatrix*
	+holdSub(const T& a, const uu_triangMatrix<U>& b, const bool checkSize) : uu_triangMatrix*
	+holdSub(const uu_triangMatrix<U>& a, const uu_triangMatrix<V>& b, const bool checkSize) : uu_triangMatrix*
	+operator*=(const T& data) : uu_triangMatrix*
	+operator+=(const T& data) : uu_triangMatrix*
	+operator+=(const uu_triangMatrix<U>& other) : uu_triangMatrix*
	+operator+=(internal::tmp<uu_triangMatrix<U>>&& other) : uu_triangMatrix*
	+operator-=(const T& data) : uu_triangMatrix*
	+operator-=(const uu_triangMatrix<U>& other) : uu_triangMatrix*
	+operator-=(internal::tmp<uu_triangMatrix<U>>&& other) : uu_triangMatrix*
	+operator/=(const T& data) : uu_triangMatrix*
	+operator=(const uu_triangMatrix& other) : uu_triangMatrix*
	+operator=(const uu_triangMatrix<U>& other) : uu_triangMatrix*
	+operator=(internal::tmp<uu_triangMatrix>&& other) : uu_triangMatrix*
	+operator=(internal::tmp<uu_triangMatrix<U>>&& other) : uu_triangMatrix*
	#swap(uu_triangMatrix& other) : uu_triangMatrix*
}


namespace internal {
	class tmp <template<class Derived>> {
		+currentlyUsed : bool
		+{static} bufferSize() : size_t
		+{static} currentlyUsedCount() : size_t
		-{static} buffer : static Vector<tmp*>
		+{static} get(Args ... shape) : tmp*
		+release() : tmp*
		+{static} freeAll() : void
	}
}






MatrixBase <|- - colMajorMatrix


MatrixBase <|- - diagMatrix


MatrixBase <|- - rowMajorMatrix


MatrixBase <|- - symMatrix


MatrixBase <|- - triangMatrix


MatrixBase <|- - ul_triangMatrix


MatrixBase <|- - uu_triangMatrix


Vector <|- - MatrixBase


rowMajorMatrix <|- - Matrix


symMatrix <|- - ldl_matrix






Matrix *- - colMajorMatrix


Vector *- - Vector


colMajorMatrix *- - colMajorMatrix


diagMatrix *- - diagMatrix


ldl_matrix *- - diagMatrix


ldl_matrix *- - ul_triangMatrix


ldl_matrix *- - uu_triangMatrix


rowMajorMatrix *- - rowMajorMatrix


symMatrix *- - symMatrix


internal.tmp o- - internal.tmp


triangMatrix *- - triangMatrix


ul_triangMatrix *- - ul_triangMatrix


uu_triangMatrix *- - uu_triangMatrix









@enduml

PlantUML version 1.2020.02(Sun Mar 01 10:22:07 UTC 2020)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Java Version: 11.0.25+9
Operating System: Linux
Default Encoding: UTF-8
Language: en
Country: null
--></g></svg>