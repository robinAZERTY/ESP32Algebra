@startuml
hide members
hide methods





/' Objects '/

class Matrix <template<typename TT>> {
	+Matrix()
	+Matrix(const size_t rows, const size_t cols)
	+Matrix(TT* data, const size_t rows, const size_t cols, const bool share)
	+Matrix(const Matrix<TT>& other)
	+Matrix(const Matrix<U>& other)
	+Matrix(const rowMajorMatrix<TT>& other)
	+Matrix(const rowMajorMatrix<U>& other)
	+Matrix(const colMajorMatrix<TT>& other)
	+Matrix(const colMajorMatrix<U>& other)
	+Matrix(internal::tmp<rowMajorMatrix<TT>>&& other)
	+Matrix(internal::tmp<colMajorMatrix<TT>>&& other)
	+operator*=(const U& data) : Matrix<TT>*
	+operator*=(const rowMajorMatrix<U>& other) : Matrix<TT>*
	+operator*=(internal::tmp<rowMajorMatrix<U>>&& other) : Matrix<TT>*
	+operator*=(const colMajorMatrix<U>& other) : Matrix<TT>*
	+operator*=(internal::tmp<colMajorMatrix<U>>&& other) : Matrix<TT>*
	+operator+=(const U& data) : Matrix<TT>*
	+operator+=(const rowMajorMatrix<U>& other) : Matrix<TT>*
	+operator+=(internal::tmp<rowMajorMatrix<U>>&& other) : Matrix<TT>*
	+operator+=(const colMajorMatrix<U>& other) : Matrix<TT>*
	+operator+=(internal::tmp<colMajorMatrix<U>>&& other) : Matrix<TT>*
	+operator-=(const U& data) : Matrix<TT>*
	+operator-=(const rowMajorMatrix<U>& other) : Matrix<TT>*
	+operator-=(internal::tmp<rowMajorMatrix<U>>&& other) : Matrix<TT>*
	+operator-=(const colMajorMatrix<U>& other) : Matrix<TT>*
	+operator-=(internal::tmp<colMajorMatrix<U>>&& other) : Matrix<TT>*
	+operator/=(const U& data) : Matrix<TT>*
	+operator=(const rowMajorMatrix<U>& other) : Matrix<TT>*
	+operator=(internal::tmp<rowMajorMatrix<U>>&& other) : Matrix<TT>*
	+operator=(const colMajorMatrix<U>& other) : Matrix<TT>*
	+operator=(internal::tmp<colMajorMatrix<U>>&& other) : Matrix<TT>*
	+referT() : Matrix<TT>*
	+resize(const size_t rows, const size_t cols, const bool deallocIfPossible, const bool saveData) : Matrix<TT>*
	#swap(Matrix<TT>& other) : Matrix<TT>*
	+T : colMajorMatrix<TT>
}


abstract class MatrixBase <template<typename T=float>> {
	+MatrixBase()
	+MatrixBase(const size_t rows, const size_t cols)
	#checkOverlap(const MatrixBase<U>& a, const MatrixBase<V>& b) : MatrixBase<T>*
	#checkSize_add(const MatrixBase<U>& a, const MatrixBase<V>& b) : MatrixBase<T>*
	#checkSize_mul(const MatrixBase<U>& a, const MatrixBase<V>& b) : MatrixBase<T>*
	+fill(const T value) : MatrixBase<T>*
	#refer(const Vector<T>& data, const size_t rows, const size_t cols) : MatrixBase<T>*
	#refer(const T* data, const size_t rows, const size_t cols) : MatrixBase<T>*
	+resize(const size_t rows, const size_t cols, const bool deallocIfPossible, const bool saveData) : MatrixBase<T>*
	+resizeLike(const MatrixBase<U>& other, const bool deallocIfPossible, const bool saveData) : MatrixBase<T>*
	#swap(MatrixBase<T>& other) : MatrixBase<T>*
	+{abstract} operator()(const size_t row, const size_t col) : T&
	+operator()(const size_t row, const size_t col) : T& {query}
	+isAdditionCompatible(const MatrixBase<U>& other) : bool {query}
	+isMultiplicationCompatible(const MatrixBase<U>& other) : bool {query}
	#_cols : size_t
	#_rows : size_t
	+cols() : size_t {query}
	#{abstract} minMemorySize(const size_t rows, const size_t cols) : size_t {query}
	#minMemorySize() : size_t {query}
	+rows() : size_t {query}
}


class Vector <template<typename T>> {
	+Vector()
	+Vector(const size_t N)
	+Vector(internal::tmp<Vector>&& v)
	+Vector(internal::tmp<Vector<U>>&& v)
	+Vector(const Vector& v, const bool share)
	+Vector(T* begin, const size_t N, const bool share)
	+~Vector()
	+operator[](size_t i) : T {query}
	+operator[](const size_t i) : T&
	#_begin : T*
	#_end : T*
	#_endOfStorage : T*
	+begin() : T* {query}
	+end() : T* {query}
	+dot(const Vector<U>& other, const bool checkSize) : V
	+addMul(const rowMajorMatrix<U>& a, const Vector<V>& b, const bool checkSize) : Vector*
	#allocate(const size_t capacity, const bool deallocIfPossible, const bool saveData) : Vector*
	+fill(const T val) : Vector*
	+hold(T* begin, const size_t N, const bool checkSize) : Vector*
	+hold(const Vector& v, const bool checkSize) : Vector*
	+hold(const Vector<U>& v, const bool checkSize) : Vector*
	+holdAdd(const Vector<U>& v1, const Vector<V>& v2, const bool checkSize) : Vector*
	+holdAdd(const Vector<U>& v1, const T val, const bool checkSize) : Vector*
	+holdDiv(const Vector<U>& v1, const Vector<V>& v2, const bool checkSize) : Vector*
	+holdDiv(const T val, const Vector<U>& v, const bool checkSize) : Vector*
	+holdMul(const MatrixBase<U>& a, const Vector<V>& b, const bool checkSize) : Vector*
	+holdMul(const rowMajorMatrix<U>& a, const Vector<V>& b, const bool checkSize) : Vector*
	+holdMul(const Vector<U>& v1, const Vector<V>& v2, const bool checkSize) : Vector*
	+holdMul(const Vector<U>& v1, const V val, const bool checkSize) : Vector*
	+holdSub(const Vector<U>& v1, const Vector<V>& v2, const bool checkSize) : Vector*
	+holdSub(const Vector<U>& v1, const T val, const bool checkSize) : Vector*
	+holdSub(const T val, const Vector<U>& v, const bool checkSize) : Vector*
	+insert(const T& value, const size_t index) : Vector*
	+operator*=(const Vector<U>& v) : Vector*
	+operator*=(const T& val) : Vector*
	+operator*=(internal::tmp<Vector<T>>&& v) : Vector*
	+operator+=(const Vector<U>& v) : Vector*
	+operator+=(const T& val) : Vector*
	+operator+=(internal::tmp<Vector<U>>&& v) : Vector*
	+operator-=(const Vector<U>& v) : Vector*
	+operator-=(const T& val) : Vector*
	+operator-=(internal::tmp<Vector<U>>&& v) : Vector*
	+operator/=(const Vector<U>& v) : Vector*
	+operator/=(const T& val) : Vector*
	+operator/=(internal::tmp<Vector<U>>&& v) : Vector*
	+operator=(const Vector& v) : Vector*
	+operator=(const Vector<U>& v) : Vector*
	+operator=(internal::tmp<Vector>&& v) : Vector*
	+operator=(internal::tmp<Vector<U>>&& v) : Vector*
	+pop_back() : Vector*
	+push_back(const T& value) : Vector*
	#refer(const Vector& other) : Vector*
	#refer(T* data, size_t length) : Vector*
	+removeAt(const size_t index) : Vector*
	+removeFirst(const T& value) : Vector*
	+removeLast(const T& value) : Vector*
	+resize(const size_t N, const bool deallocateIfPossible, const bool saveData) : Vector*
	+sort(const bool ascending) : Vector*
	#swap(Vector& other) : Vector*
	+findAll(const T& value, Vector<size_t>& indices_holder) : Vector<size_t>* {query}
	+operator!=(const Vector<U>& v) : bool {query}
	+operator!=(const T val) : bool {query}
	+operator==(const Vector<U>& v) : bool {query}
	+operator==(const T val) : bool {query}
	#overlap(const Vector<U>& other) : bool {query}
	+shared() : bool {query}
	+capacity() : size_t {query}
	+findFirst(const T& value) : size_t {query}
	+findLast(const T& value) : size_t {query}
	#minMemorySize(const size_t N) : size_t {query}
	+size() : size_t {query}
	#{static} staticHelper : static const Vector
}


class colMajorMatrix <template<typename T>> {
	+colMajorMatrix()
	+colMajorMatrix(const size_t rows, const size_t cols)
	+colMajorMatrix(T* data, const size_t rows, const size_t cols, const bool share)
	+colMajorMatrix(const colMajorMatrix& other)
	+colMajorMatrix(const colMajorMatrix<U>& other)
	+colMajorMatrix(internal::tmp<colMajorMatrix<T>>&& other)
	+colMajorMatrix(internal::tmp<colMajorMatrix<U>>&& other)
	+colMajorMatrix(const rowMajorMatrix<U>& other)
	+colMajorMatrix(internal::tmp<rowMajorMatrix<U>>&& other)
	+operator()(const size_t row, const size_t col) : T&
	+hold(const colMajorMatrix& other, const bool checkSize) : colMajorMatrix*
	+operator=(internal::tmp<colMajorMatrix>&& other) : colMajorMatrix*
	+hold(const colMajorMatrix<U>& other, const bool checkSize) : colMajorMatrix<T>*
	+hold(const rowMajorMatrix<U>& other, const bool checkSize) : colMajorMatrix<T>*
	+holdAdd(const colMajorMatrix<U>& a, const T& b, const bool checkSize) : colMajorMatrix<T>*
	+holdAdd(const colMajorMatrix<U>& a, const colMajorMatrix<V>& b, const bool checkSize) : colMajorMatrix<T>*
	+holdAdd(const rowMajorMatrix<U>& a, const rowMajorMatrix<V>& b, const bool checkSize) : colMajorMatrix<T>*
	+holdAdd(const colMajorMatrix<U>& a, const rowMajorMatrix<V>& b, const bool checkSize) : colMajorMatrix<T>*
	+holdMul(const colMajorMatrix<U>& a, const T& b, const bool checkSize) : colMajorMatrix<T>*
	+holdMul(const colMajorMatrix<U>& a, const colMajorMatrix<V>& b, const bool checkSize, const bool checkOverlap) : colMajorMatrix<T>*
	+holdMul(const rowMajorMatrix<U>& a, const rowMajorMatrix<V>& b, const bool checkSize, const bool checkOverlap) : colMajorMatrix<T>*
	+holdMul(const colMajorMatrix<U>& a, const rowMajorMatrix<V>& b, const bool checkSize, const bool checkOverlap) : colMajorMatrix<T>*
	+holdMul(const rowMajorMatrix<U>& a, const colMajorMatrix<V>& b, const bool checkSize, const bool checkOverlap) : colMajorMatrix<T>*
	+holdSub(const colMajorMatrix<U>& a, const T& b, const bool checkSize) : colMajorMatrix<T>*
	+holdSub(const T& a, const colMajorMatrix<U>& b, const bool checkSize) : colMajorMatrix<T>*
	+holdSub(const colMajorMatrix<U>& a, const colMajorMatrix<V>& b, const bool checkSize) : colMajorMatrix<T>*
	+holdSub(const rowMajorMatrix<U>& a, const rowMajorMatrix<V>& b, const bool checkSize) : colMajorMatrix<T>*
	+holdSub(const colMajorMatrix<U>& a, const rowMajorMatrix<V>& b, const bool checkSize) : colMajorMatrix<T>*
	+holdSub(const rowMajorMatrix<U>& a, const colMajorMatrix<V>& b, const bool checkSize) : colMajorMatrix<T>*
	+operator*=(const T& data) : colMajorMatrix<T>*
	+operator*=(const colMajorMatrix<U>& other) : colMajorMatrix<T>*
	+operator*=(internal::tmp<colMajorMatrix<U>>&& other) : colMajorMatrix<T>*
	+operator*=(const rowMajorMatrix<U>& other) : colMajorMatrix<T>*
	+operator*=(internal::tmp<rowMajorMatrix<U>>&& other) : colMajorMatrix<T>*
	+operator+=(const T& data) : colMajorMatrix<T>*
	+operator+=(const colMajorMatrix<U>& other) : colMajorMatrix<T>*
	+operator+=(internal::tmp<colMajorMatrix<U>>&& other) : colMajorMatrix<T>*
	+operator+=(const rowMajorMatrix<U>& other) : colMajorMatrix<T>*
	+operator+=(internal::tmp<rowMajorMatrix<U>>&& other) : colMajorMatrix<T>*
	+operator-=(const T& data) : colMajorMatrix<T>*
	+operator-=(const colMajorMatrix<U>& other) : colMajorMatrix<T>*
	+operator-=(internal::tmp<colMajorMatrix<U>>&& other) : colMajorMatrix<T>*
	+operator-=(const rowMajorMatrix<U>& other) : colMajorMatrix<T>*
	+operator-=(internal::tmp<rowMajorMatrix<U>>&& other) : colMajorMatrix<T>*
	+operator/=(const T& data) : colMajorMatrix<T>*
	+operator=(const colMajorMatrix<T>& other) : colMajorMatrix<T>*
	+operator=(const colMajorMatrix<U>& other) : colMajorMatrix<T>*
	+operator=(internal::tmp<colMajorMatrix<U>>&& other) : colMajorMatrix<T>*
	+operator=(const rowMajorMatrix<U>& other) : colMajorMatrix<T>*
	+operator=(internal::tmp<rowMajorMatrix<U>>&& other) : colMajorMatrix<T>*
	#refer(colMajorMatrix<T>& other) : colMajorMatrix<T>*
	#swap(colMajorMatrix<T>& other) : colMajorMatrix<T>*
	#{static} staticHelper : const static colMajorMatrix<T>
	#minMemorySize(const size_t rows, const size_t cols) : size_t {query}
}


class diagMatrix <template<typename T>> {
	+diagMatrix(const size_t rows, const size_t cols)
	+diagMatrix(const size_t size)
	+diagMatrix()
	+det() : T {query}
	+operator()(const size_t row, const size_t col) : T&
	+operator()(const size_t row, const size_t col) : T& {query}
	+holdInv(const diagMatrix<U>& other, const bool checkSize) : diagMatrix*
	+operator*=(const T& data) : diagMatrix*
	+operator*=(const diagMatrix<U>& other) : diagMatrix*
	+operator*=(internal::tmp<diagMatrix<U>>&& other) : diagMatrix*
	+operator+=(const T& data) : diagMatrix*
	+operator+=(const diagMatrix<U>& other) : diagMatrix*
	+operator+=(internal::tmp<diagMatrix<U>>&& other) : diagMatrix*
	+operator-=(const T& data) : diagMatrix*
	+operator-=(const diagMatrix<U>& other) : diagMatrix*
	+operator-=(internal::tmp<diagMatrix<U>>&& other) : diagMatrix*
	+operator/=(const T& data) : diagMatrix*
	+operator=(const diagMatrix& other) : diagMatrix*
	+operator=(const diagMatrix<U>& other) : diagMatrix*
	+operator=(internal::tmp<diagMatrix>&& other) : diagMatrix*
	+operator=(internal::tmp<diagMatrix<U>>&& other) : diagMatrix*
	+checkIsSquare() : diagMatrix<T>* {query}
	+hold(const diagMatrix<T>& other, const bool checkSize) : diagMatrix<T>*
	+hold(const diagMatrix<U>& other, const bool checkSize) : diagMatrix<T>*
	+holdAdd(const diagMatrix<U>& a, const T& b, const bool checkSize) : diagMatrix<T>*
	+holdAdd(const diagMatrix<U>& a, const diagMatrix<V>& b, const bool checkSize) : diagMatrix<T>*
	+holdDiv(const diagMatrix<U>& a, const T& b, const bool checkSize) : diagMatrix<T>*
	+holdInv(const T val, const diagMatrix<U>& other, const bool checkSize) : diagMatrix<T>*
	+holdMul(const diagMatrix<U>& a, const T& b, const bool checkSize) : diagMatrix<T>*
	+holdMul(const diagMatrix<U>& a, const diagMatrix<V>& b, const bool checkSize) : diagMatrix<T>*
	+holdSub(const diagMatrix<U>& a, const T& b, const bool checkSize) : diagMatrix<T>*
	+holdSub(const T& a, const diagMatrix<U>& b, const bool checkSize) : diagMatrix<T>*
	+holdSub(const diagMatrix<U>& a, const diagMatrix<V>& b, const bool checkSize) : diagMatrix<T>*
	#swap(diagMatrix<T>& other) : diagMatrix<T>*
	#minMemorySize(const size_t rows, const size_t cols) : size_t {query}
	#{static} staticHelper : static const diagMatrix<T>
}


class ldl_matrix <template<typename T>> {
	+ldl_matrix()
	+ldl_matrix(const size_t order)
	+D : diagMatrix<T>
	+decompose() : ldl_matrix<T>*
	+referT() : ldl_matrix<T>*
	+resize(const size_t order, const bool deallocIfPossible, const bool saveData) : ldl_matrix<T>*
	+L : ul_triangMatrix<T>
	+LT : uu_triangMatrix<T>
}


class rowMajorMatrix <template<typename T>> {
	+rowMajorMatrix()
	+rowMajorMatrix(const size_t rows, const size_t cols)
	+rowMajorMatrix(T* data, const size_t rows, const size_t cols, const bool share)
	+rowMajorMatrix(const rowMajorMatrix& other)
	+rowMajorMatrix(const rowMajorMatrix<U>& other)
	+rowMajorMatrix(internal::tmp<rowMajorMatrix<T>>&& other)
	+rowMajorMatrix(internal::tmp<rowMajorMatrix<U>>&& other)
	+rowMajorMatrix(const colMajorMatrix<U>& other)
	+rowMajorMatrix(const internal::tmp<colMajorMatrix<U>>& other)
	+operator()(const size_t row, const size_t col) : T&
	+operator()(const size_t row, const size_t col) : T& {query}
	+hold(const rowMajorMatrix& other, const bool checkSize) : rowMajorMatrix*
	+operator*=(const T& data) : rowMajorMatrix*
	+operator+=(const T& data) : rowMajorMatrix*
	+operator-=(const T& data) : rowMajorMatrix*
	+operator/=(const T& data) : rowMajorMatrix*
	+operator=(internal::tmp<rowMajorMatrix>&& other) : rowMajorMatrix*
	+hold(const rowMajorMatrix<U>& other, const bool checkSize) : rowMajorMatrix<T>*
	+hold(const colMajorMatrix<U>& other, const bool checkSize) : rowMajorMatrix<T>*
	+hold(const diagMatrix<U>& other, const bool checkSize) : rowMajorMatrix<T>*
	+holdAdd(const rowMajorMatrix<U>& a, const T& b, const bool checkSize) : rowMajorMatrix<T>*
	+holdAdd(const rowMajorMatrix<U>& a, const rowMajorMatrix<V>& b, const bool checkSize) : rowMajorMatrix<T>*
	+holdAdd(const colMajorMatrix<U>& a, const colMajorMatrix<V>& b, const bool checkSize) : rowMajorMatrix<T>*
	+holdAdd(const rowMajorMatrix<U>& a, const colMajorMatrix<V>& b, const bool checkSize) : rowMajorMatrix<T>*
	+holdAdd(const rowMajorMatrix<U>& a, const diagMatrix<V>& b, const bool checkSize) : rowMajorMatrix<T>*
	+holdDiv(const rowMajorMatrix<U>& a, const diagMatrix<V>& b, const bool checkSize) : rowMajorMatrix<T>*
	+holdMul(const rowMajorMatrix<U>& a, const T& b, const bool checkSize) : rowMajorMatrix<T>*
	+holdMul(const rowMajorMatrix<U>& a, const rowMajorMatrix<V>& b, const bool checkSize, const bool checkOverlap) : rowMajorMatrix<T>*
	+holdMul(const colMajorMatrix<U>& a, const colMajorMatrix<V>& b, const bool checkSize, const bool checkOverlap) : rowMajorMatrix<T>*
	+holdMul(const rowMajorMatrix<U>& a, const colMajorMatrix<V>& b, const bool checkSize, const bool checkOverlap) : rowMajorMatrix<T>*
	+holdMul(const colMajorMatrix<U>& a, const rowMajorMatrix<V>& b, const bool checkSize, const bool checkOverlap) : rowMajorMatrix<T>*
	+holdMul(const rowMajorMatrix<U>& a, const diagMatrix<V>& b, const bool checkSize) : rowMajorMatrix<T>*
	+holdMul(const diagMatrix<U>& a, const rowMajorMatrix<V>& b, const bool checkSize) : rowMajorMatrix<T>*
	+holdMul(const rowMajorMatrix<U>& a, const symMatrix<V>& b, const bool checkSize) : rowMajorMatrix<T>*
	+holdMul(const colMajorMatrix<U>& a, const symMatrix<V>& b, const bool checkSize) : rowMajorMatrix<T>*
	+holdSub(const rowMajorMatrix<U>& a, const T& b, const bool checkSize) : rowMajorMatrix<T>*
	+holdSub(const T& a, const rowMajorMatrix<U>& b, const bool checkSize) : rowMajorMatrix<T>*
	+holdSub(const rowMajorMatrix<U>& a, const rowMajorMatrix<V>& b, const bool checkSize) : rowMajorMatrix<T>*
	+holdSub(const colMajorMatrix<U>& a, const colMajorMatrix<V>& b, const bool checkSize) : rowMajorMatrix<T>*
	+holdSub(const rowMajorMatrix<U>& a, const colMajorMatrix<V>& b, const bool checkSize) : rowMajorMatrix<T>*
	+holdSub(const colMajorMatrix<U>& a, const rowMajorMatrix<V>& b, const bool checkSize) : rowMajorMatrix<T>*
	+holdSub(const rowMajorMatrix<U>& a, const diagMatrix<V>& b, const bool checkSize) : rowMajorMatrix<T>*
	+holdSub(const diagMatrix<U>& a, const rowMajorMatrix<V>& b, const bool checkSize) : rowMajorMatrix<T>*
	+operator*=(const rowMajorMatrix<U>& other) : rowMajorMatrix<T>*
	+operator*=(internal::tmp<rowMajorMatrix<U>>&& other) : rowMajorMatrix<T>*
	+operator*=(const colMajorMatrix<U>& other) : rowMajorMatrix<T>*
	+operator*=(internal::tmp<colMajorMatrix<U>>&& other) : rowMajorMatrix<T>*
	+operator*=(const diagMatrix<U>& other) : rowMajorMatrix<T>*
	+operator+=(const rowMajorMatrix<U>& other) : rowMajorMatrix<T>*
	+operator+=(internal::tmp<rowMajorMatrix<U>>&& other) : rowMajorMatrix<T>*
	+operator+=(const colMajorMatrix<U>& other) : rowMajorMatrix<T>*
	+operator+=(internal::tmp<colMajorMatrix<U>>&& other) : rowMajorMatrix<T>*
	+operator+=(const diagMatrix<U>& other) : rowMajorMatrix<T>*
	+operator-=(const rowMajorMatrix<U>& other) : rowMajorMatrix<T>*
	+operator-=(internal::tmp<rowMajorMatrix<U>>&& other) : rowMajorMatrix<T>*
	+operator-=(const colMajorMatrix<U>& other) : rowMajorMatrix<T>*
	+operator-=(internal::tmp<colMajorMatrix<U>>&& other) : rowMajorMatrix<T>*
	+operator-=(const diagMatrix<U>& other) : rowMajorMatrix<T>*
	+operator/=(const diagMatrix<U>& other) : rowMajorMatrix<T>*
	+operator=(const rowMajorMatrix<T>& other) : rowMajorMatrix<T>*
	+operator=(const rowMajorMatrix<U>& other) : rowMajorMatrix<T>*
	+operator=(internal::tmp<rowMajorMatrix<U>>&& other) : rowMajorMatrix<T>*
	+operator=(const colMajorMatrix<U>& other) : rowMajorMatrix<T>*
	+operator=(internal::tmp<colMajorMatrix<U>>&& other) : rowMajorMatrix<T>*
	+operator=(const diagMatrix<U>& other) : rowMajorMatrix<T>*
	#refer(rowMajorMatrix<T>& other) : rowMajorMatrix<T>*
	#swap(rowMajorMatrix<T>& other) : rowMajorMatrix<T>*
	#minMemorySize(const size_t rows, const size_t cols) : size_t {query}
	#{static} staticHelper : static const rowMajorMatrix<T>
}


class symMatrix <template<typename T>> {
	+symMatrix()
	+symMatrix(const size_t order)
	+symMatrix(const size_t rows, const size_t cols)
	+operator()(const size_t row, const size_t col) : T&
	#minMemorySize(const size_t order) : size_t {query}
	#minMemorySize(const size_t rows, const size_t cols) : size_t {query}
	#{static} staticHelper : static const symMatrix<T>
	+addMul(const rowMajorMatrix<U>& a, const rowMajorMatrix<U>& b, const bool checkSize, const bool checkOverlap) : symMatrix*
	+addMul(const rowMajorMatrix<U>& a, const colMajorMatrix<V>& b, const bool checkSize) : symMatrix*
	+hold(const symMatrix& other, const bool checkSize) : symMatrix*
	+hold(const symMatrix<U>& other, const bool checkSize) : symMatrix*
	+hold(const rowMajorMatrix<U>& other, const bool checkSize) : symMatrix*
	+holdAdd(const symMatrix<U>& a, const symMatrix<V>& b, const bool checkSize) : symMatrix*
	+holdAdd(const rowMajorMatrix<U>& a, const symMatrix<V>& b, const bool checkSize) : symMatrix*
	+holdInv(ldl_matrix<U>& other, const bool checkSize) : symMatrix*
	+holdMul(const symMatrix<U>& a, const symMatrix<V>& b, const bool checkSize, const bool checkOverlap) : symMatrix*
	+holdMul(const rowMajorMatrix<U>& a, const rowMajorMatrix<U>& b, const bool checkSize, const bool checkOverlap) : symMatrix*
	+holdMul(const rowMajorMatrix<U>& a, const symMatrix<V>& b, const bool checkSize, const bool checkOverlap) : symMatrix*
	+holdMul(const symMatrix<U>& a, const rowMajorMatrix<V>& b, const bool checkSize, const bool checkOverlap) : symMatrix*
	+holdMul(const rowMajorMatrix<U>& a, const colMajorMatrix<V>& b, const bool checkSize) : symMatrix*
	+holdMul(const triangMatrix<U>& a, const uu_triangMatrix<U>& b, const bool checkSize) : symMatrix*
	+holdSub(const symMatrix<U>& a, const symMatrix<V>& b, const bool checkSize) : symMatrix*
	+holdSub(const rowMajorMatrix<U>& a, const symMatrix<V>& b, const bool checkSize) : symMatrix*
	+holdSub(const symMatrix<U>& a, const rowMajorMatrix<V>& b, const bool checkSize) : symMatrix*
	+operator*=(const T& data) : symMatrix*
	+operator*=(const symMatrix<U>& other) : symMatrix*
	+operator*=(internal::tmp<symMatrix<U>>&& other) : symMatrix*
	+operator*=(const rowMajorMatrix<U>& other) : symMatrix*
	+operator*=(internal::tmp<rowMajorMatrix<U>>&& other) : symMatrix*
	+operator+=(const T& data) : symMatrix*
	+operator+=(const symMatrix<U>& other) : symMatrix*
	+operator+=(internal::tmp<symMatrix<U>>&& other) : symMatrix*
	+operator+=(const rowMajorMatrix<U>& other) : symMatrix*
	+operator+=(internal::tmp<rowMajorMatrix<U>>&& other) : symMatrix*
	+operator-=(const T& data) : symMatrix*
	+operator-=(const symMatrix<U>& other) : symMatrix*
	+operator-=(internal::tmp<symMatrix<U>>&& other) : symMatrix*
	+operator-=(const rowMajorMatrix<U>& other) : symMatrix*
	+operator-=(internal::tmp<rowMajorMatrix<U>>&& other) : symMatrix*
	+operator/=(const T& data) : symMatrix*
	+operator=(const symMatrix& other) : symMatrix*
	+operator=(const symMatrix<U>& other) : symMatrix*
	+operator=(internal::tmp<symMatrix>&& other) : symMatrix*
	+operator=(internal::tmp<symMatrix<U>>&& other) : symMatrix*
	+operator=(const rowMajorMatrix<U>& other) : symMatrix*
	+operator=(internal::tmp<rowMajorMatrix<U>>&& other) : symMatrix*
	+subMul(const rowMajorMatrix<U>& a, const rowMajorMatrix<U>& b, const bool checkSize, const bool checkOverlap) : symMatrix*
	#swap(symMatrix& other) : symMatrix*
	+holdAdd(const symMatrix<U>& a, const T& b, const bool checkSize) : symMatrix<T>*
	+holdMul(const symMatrix<U>& a, const T& b, const bool checkSize) : symMatrix<T>*
	+holdSub(const symMatrix<U>& a, const T& b, const bool checkSize) : symMatrix<T>*
	+holdSub(const T& a, const symMatrix<U>& b, const bool checkSize) : symMatrix<T>*
}


class triangMatrix <template<typename T>> {
	+triangMatrix()
	+triangMatrix(const size_t order)
	+operator()(const size_t row, const size_t col) : T&
	+operator()(const size_t row, const size_t col) : T& {query}
	#minMemorySize(const size_t order) : size_t {query}
	#minMemorySize(const size_t rows, const size_t cols) : size_t {query}
	#{static} staticHelper : static const triangMatrix<T>
	+hold(const triangMatrix& other, const bool checkSize) : triangMatrix*
	+hold(const triangMatrix<U>& other, const bool checkSize) : triangMatrix*
	+holdAdd(const triangMatrix<U>& a, const T& b, const bool checkSize) : triangMatrix*
	+holdAdd(const triangMatrix<U>& a, const triangMatrix<V>& b, const bool checkSize) : triangMatrix*
	+holdDiv(const triangMatrix<U>& a, const T& b, const bool checkSize) : triangMatrix*
	+holdMul(const triangMatrix<U>& a, const T& b, const bool checkSize) : triangMatrix*
	+holdMul(const triangMatrix<U>& a, const triangMatrix<V>& b, const bool checkSize, const bool checkOverlap) : triangMatrix*
	+holdMul(const ul_triangMatrix<U>& a, const diagMatrix<V>& b, const bool checkSize) : triangMatrix*
	+holdSub(const triangMatrix<U>& a, const T& b, const bool checkSize) : triangMatrix*
	+holdSub(const T& a, const triangMatrix<U>& b, const bool checkSize) : triangMatrix*
	+holdSub(const triangMatrix<U>& a, const triangMatrix<V>& b, const bool checkSize) : triangMatrix*
	+operator*=(const T& data) : triangMatrix*
	+operator*=(const triangMatrix<U>& other) : triangMatrix*
	+operator*=(internal::tmp<triangMatrix<U>>&& other) : triangMatrix*
	+operator+=(const T& data) : triangMatrix*
	+operator+=(const triangMatrix<U>& other) : triangMatrix*
	+operator+=(internal::tmp<triangMatrix<U>>&& other) : triangMatrix*
	+operator-=(const T& data) : triangMatrix*
	+operator-=(const triangMatrix<U>& other) : triangMatrix*
	+operator-=(internal::tmp<triangMatrix<U>>&& other) : triangMatrix*
	+operator/=(const T& data) : triangMatrix*
	+operator=(const triangMatrix& other) : triangMatrix*
	+operator=(const triangMatrix<U>& other) : triangMatrix*
	+operator=(internal::tmp<triangMatrix>&& other) : triangMatrix*
	+operator=(internal::tmp<triangMatrix<U>>&& other) : triangMatrix*
	#swap(triangMatrix& other) : triangMatrix*
}


class ul_triangMatrix <template<typename T>> {
	+ul_triangMatrix()
	+ul_triangMatrix(const size_t order)
	+operator()(const size_t row, const size_t col) : T&
	+operator()(const size_t row, const size_t col) : T& {query}
	#minMemorySize(const size_t order) : size_t {query}
	#minMemorySize(const size_t rows, const size_t cols) : size_t {query}
	#{static} staticHelper : static const ul_triangMatrix<T>
	+hold(const ul_triangMatrix& other, const bool checkSize) : ul_triangMatrix*
	+hold(const ul_triangMatrix<U>& other, const bool checkSize) : ul_triangMatrix*
	+holdAdd(const ul_triangMatrix<U>& a, const T& b, const bool checkSize) : ul_triangMatrix*
	+holdAdd(const ul_triangMatrix<U>& a, const ul_triangMatrix<V>& b, const bool checkSize) : ul_triangMatrix*
	+holdDiv(const ul_triangMatrix<U>& a, const T& b, const bool checkSize) : ul_triangMatrix*
	+holdInv(const ul_triangMatrix<U>& other, const bool checkSize) : ul_triangMatrix*
	+holdMul(const ul_triangMatrix<U>& a, const T& b, const bool checkSize) : ul_triangMatrix*
	+holdMul(const ul_triangMatrix<U>& a, const ul_triangMatrix<V>& b, const bool checkSize, const bool checkOverlap) : ul_triangMatrix*
	+holdSub(const ul_triangMatrix<U>& a, const T& b, const bool checkSize) : ul_triangMatrix*
	+holdSub(const T& a, const ul_triangMatrix<U>& b, const bool checkSize) : ul_triangMatrix*
	+holdSub(const ul_triangMatrix<U>& a, const ul_triangMatrix<V>& b, const bool checkSize) : ul_triangMatrix*
	+operator*=(const T& data) : ul_triangMatrix*
	+operator*=(const ul_triangMatrix<U>& other) : ul_triangMatrix*
	+operator*=(internal::tmp<ul_triangMatrix<U>>&& other) : ul_triangMatrix*
	+operator+=(const T& data) : ul_triangMatrix*
	+operator+=(const ul_triangMatrix<U>& other) : ul_triangMatrix*
	+operator+=(internal::tmp<ul_triangMatrix<U>>&& other) : ul_triangMatrix*
	+operator-=(const T& data) : ul_triangMatrix*
	+operator-=(const ul_triangMatrix<U>& other) : ul_triangMatrix*
	+operator-=(internal::tmp<ul_triangMatrix<U>>&& other) : ul_triangMatrix*
	+operator/=(const T& data) : ul_triangMatrix*
	+operator=(const ul_triangMatrix& other) : ul_triangMatrix*
	+operator=(const ul_triangMatrix<U>& other) : ul_triangMatrix*
	+operator=(internal::tmp<ul_triangMatrix>&& other) : ul_triangMatrix*
	+operator=(internal::tmp<ul_triangMatrix<U>>&& other) : ul_triangMatrix*
	#swap(ul_triangMatrix& other) : ul_triangMatrix*
}


class uu_triangMatrix <template<typename T>> {
	+uu_triangMatrix()
	+uu_triangMatrix(const size_t order)
	+operator()(const size_t row, const size_t col) : T&
	+operator()(const size_t row, const size_t col) : T& {query}
	#minMemorySize(const size_t order) : size_t {query}
	#minMemorySize(const size_t rows, const size_t cols) : size_t {query}
	#{static} staticHelper : static const uu_triangMatrix<T>
	+hold(const uu_triangMatrix& other, const bool checkSize) : uu_triangMatrix*
	+hold(const uu_triangMatrix<U>& other, const bool checkSize) : uu_triangMatrix*
	+holdAdd(const uu_triangMatrix<U>& a, const T& b, const bool checkSize) : uu_triangMatrix*
	+holdAdd(const uu_triangMatrix<U>& a, const uu_triangMatrix<V>& b, const bool checkSize) : uu_triangMatrix*
	+holdDiv(const uu_triangMatrix<U>& a, const T& b, const bool checkSize) : uu_triangMatrix*
	+holdMul(const uu_triangMatrix<U>& a, const T& b, const bool checkSize) : uu_triangMatrix*
	+holdSub(const uu_triangMatrix<U>& a, const T& b, const bool checkSize) : uu_triangMatrix*
	+holdSub(const T& a, const uu_triangMatrix<U>& b, const bool checkSize) : uu_triangMatrix*
	+holdSub(const uu_triangMatrix<U>& a, const uu_triangMatrix<V>& b, const bool checkSize) : uu_triangMatrix*
	+operator*=(const T& data) : uu_triangMatrix*
	+operator+=(const T& data) : uu_triangMatrix*
	+operator+=(const uu_triangMatrix<U>& other) : uu_triangMatrix*
	+operator+=(internal::tmp<uu_triangMatrix<U>>&& other) : uu_triangMatrix*
	+operator-=(const T& data) : uu_triangMatrix*
	+operator-=(const uu_triangMatrix<U>& other) : uu_triangMatrix*
	+operator-=(internal::tmp<uu_triangMatrix<U>>&& other) : uu_triangMatrix*
	+operator/=(const T& data) : uu_triangMatrix*
	+operator=(const uu_triangMatrix& other) : uu_triangMatrix*
	+operator=(const uu_triangMatrix<U>& other) : uu_triangMatrix*
	+operator=(internal::tmp<uu_triangMatrix>&& other) : uu_triangMatrix*
	+operator=(internal::tmp<uu_triangMatrix<U>>&& other) : uu_triangMatrix*
	#swap(uu_triangMatrix& other) : uu_triangMatrix*
}


namespace internal {
	class tmp <template<class Derived>> {
		+currentlyUsed : bool
		+{static} bufferSize() : size_t
		+{static} currentlyUsedCount() : size_t
		-{static} buffer : static Vector<tmp*>
		+{static} get(Args ... shape) : tmp*
		+release() : tmp*
		+{static} freeAll() : void
	}
}





/' Inheritance relationships '/

.MatrixBase <|-- .colMajorMatrix


.MatrixBase <|-- .diagMatrix


.MatrixBase <|-- .rowMajorMatrix


.MatrixBase <|-- .symMatrix


.MatrixBase <|-- .triangMatrix


.MatrixBase <|-- .ul_triangMatrix


.MatrixBase <|-- .uu_triangMatrix


.Vector <|-- .MatrixBase


.rowMajorMatrix <|-- .Matrix


.symMatrix <|-- .ldl_matrix





/' Aggregation relationships '/

.Matrix *-- .colMajorMatrix


.Vector *-- .Vector


.colMajorMatrix *-- .colMajorMatrix


.diagMatrix *-- .diagMatrix


.ldl_matrix *-- .diagMatrix


.ldl_matrix *-- .ul_triangMatrix


.ldl_matrix *-- .uu_triangMatrix


.rowMajorMatrix *-- .rowMajorMatrix


.symMatrix *-- .symMatrix


internal.tmp *-- .Vector


internal.tmp o-- internal.tmp


.triangMatrix *-- .triangMatrix


.ul_triangMatrix *-- .ul_triangMatrix


.uu_triangMatrix *-- .uu_triangMatrix






/' Nested objects '/



@enduml
